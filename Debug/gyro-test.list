
gyro-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000134  20000010  20000010  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20000144  20000144  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a568  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002cf7  00000000  00000000  0003a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b1d5  00000000  00000000  0003d29b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c60  00000000  00000000  00048470  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bd0  00000000  00000000  000490d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001d9cc  00000000  00000000  00049ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000cffb  00000000  00000000  0006766c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000957f1  00000000  00000000  00074667  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00109e58  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002284  00000000  00000000  00109ed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b64 	.word	0x08002b64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002b64 	.word	0x08002b64

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b510      	push	{r4, lr}
 8000966:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_InitTick+0x40>)
 800096a:	7818      	ldrb	r0, [r3, #0]
 800096c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000970:	fbb3 f3f0 	udiv	r3, r3, r0
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_InitTick+0x44>)
 8000976:	6810      	ldr	r0, [r2, #0]
 8000978:	fbb0 f0f3 	udiv	r0, r0, r3
 800097c:	f000 f8a0 	bl	8000ac0 <HAL_SYSTICK_Config>
 8000980:	b968      	cbnz	r0, 800099e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	2c0f      	cmp	r4, #15
 8000984:	d901      	bls.n	800098a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000986:	2001      	movs	r0, #1
 8000988:	e00a      	b.n	80009a0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098a:	2200      	movs	r2, #0
 800098c:	4621      	mov	r1, r4
 800098e:	f04f 30ff 	mov.w	r0, #4294967295
 8000992:	f000 f855 	bl	8000a40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000996:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_InitTick+0x40>)
 8000998:	605c      	str	r4, [r3, #4]
  }
   /* Return function status */
  return HAL_OK;
 800099a:	2000      	movs	r0, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800099e:	2001      	movs	r0, #1
}
 80009a0:	bd10      	pop	{r4, pc}
 80009a2:	bf00      	nop
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008

080009ac <HAL_Init>:
{
 80009ac:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ae:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x20>)
 80009b0:	6813      	ldr	r3, [r2, #0]
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f82f 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff ffd0 	bl	8000964 <HAL_InitTick>
  HAL_MspInit();
 80009c4:	f001 fed8 	bl	8002778 <HAL_MspInit>
}
 80009c8:	2000      	movs	r0, #0
 80009ca:	bd08      	pop	{r3, pc}
 80009cc:	40022000 	.word	0x40022000

080009d0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_IncTick+0x10>)
 80009d2:	6811      	ldr	r1, [r2, #0]
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_IncTick+0x14>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	440b      	add	r3, r1
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000068 	.word	0x20000068
 80009e4:	20000000 	.word	0x20000000

080009e8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80009e8:	4b01      	ldr	r3, [pc, #4]	; (80009f0 <HAL_GetTick+0x8>)
 80009ea:	6818      	ldr	r0, [r3, #0]
}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000068 	.word	0x20000068

080009f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b538      	push	{r3, r4, r5, lr}
 80009f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff fff6 	bl	80009e8 <HAL_GetTick>
 80009fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a02:	d002      	beq.n	8000a0a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <HAL_Delay+0x24>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a0a:	f7ff ffed 	bl	80009e8 <HAL_GetTick>
 8000a0e:	1b40      	subs	r0, r0, r5
 8000a10:	42a0      	cmp	r0, r4
 8000a12:	d3fa      	bcc.n	8000a0a <HAL_Delay+0x16>
  {
  }
}
 8000a14:	bd38      	pop	{r3, r4, r5, pc}
 8000a16:	bf00      	nop
 8000a18:	20000000 	.word	0x20000000

08000a1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a1e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a28:	0200      	lsls	r0, r0, #8
 8000a2a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000a30:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000a34:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000a38:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_NVIC_SetPriority+0x60>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4a:	f1c3 0407 	rsb	r4, r3, #7
 8000a4e:	2c04      	cmp	r4, #4
 8000a50:	bf28      	it	cs
 8000a52:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a54:	1d1d      	adds	r5, r3, #4
 8000a56:	2d06      	cmp	r5, #6
 8000a58:	d918      	bls.n	8000a8c <HAL_NVIC_SetPriority+0x4c>
 8000a5a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	f04f 35ff 	mov.w	r5, #4294967295
 8000a60:	fa05 f404 	lsl.w	r4, r5, r4
 8000a64:	ea21 0104 	bic.w	r1, r1, r4
 8000a68:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a6a:	fa05 f303 	lsl.w	r3, r5, r3
 8000a6e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a72:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000a74:	2800      	cmp	r0, #0
 8000a76:	db0b      	blt.n	8000a90 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	0109      	lsls	r1, r1, #4
 8000a7a:	b2c9      	uxtb	r1, r1
 8000a7c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a80:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a84:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a88:	bc30      	pop	{r4, r5}
 8000a8a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e7e5      	b.n	8000a5c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	f000 000f 	and.w	r0, r0, #15
 8000a94:	0109      	lsls	r1, r1, #4
 8000a96:	b2c9      	uxtb	r1, r1
 8000a98:	4b02      	ldr	r3, [pc, #8]	; (8000aa4 <HAL_NVIC_SetPriority+0x64>)
 8000a9a:	5419      	strb	r1, [r3, r0]
 8000a9c:	e7f4      	b.n	8000a88 <HAL_NVIC_SetPriority+0x48>
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00
 8000aa4:	e000ed14 	.word	0xe000ed14

08000aa8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000aa8:	f000 021f 	and.w	r2, r0, #31
 8000aac:	0940      	lsrs	r0, r0, #5
 8000aae:	2301      	movs	r3, #1
 8000ab0:	4093      	lsls	r3, r2
 8000ab2:	4a02      	ldr	r2, [pc, #8]	; (8000abc <HAL_NVIC_EnableIRQ+0x14>)
 8000ab4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	3801      	subs	r0, #1
 8000ac2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ac6:	d20a      	bcs.n	8000ade <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_SYSTICK_Config+0x24>)
 8000aca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_SYSTICK_Config+0x28>)
 8000ace:	21f0      	movs	r1, #240	; 0xf0
 8000ad0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad8:	2207      	movs	r2, #7
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000aec:	2804      	cmp	r0, #4
 8000aee:	d005      	beq.n	8000afc <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000af0:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	f023 0304 	bic.w	r3, r3, #4
 8000af8:	6013      	str	r3, [r2, #0]
  }
}
 8000afa:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000afc:	4a02      	ldr	r2, [pc, #8]	; (8000b08 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000afe:	6813      	ldr	r3, [r2, #0]
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	4770      	bx	lr
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b0c:	4770      	bx	lr

08000b0e <HAL_SYSTICK_IRQHandler>:
{
 8000b0e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b10:	f7ff fffc 	bl	8000b0c <HAL_SYSTICK_Callback>
}
 8000b14:	bd08      	pop	{r3, pc}
	...

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b4f0      	push	{r4, r5, r6, r7}
 8000b1a:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 8000b1c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b1e:	e036      	b.n	8000b8e <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b20:	2404      	movs	r4, #4
 8000b22:	e000      	b.n	8000b26 <HAL_GPIO_Init+0xe>
 8000b24:	2400      	movs	r4, #0
 8000b26:	40b4      	lsls	r4, r6
 8000b28:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b2a:	3502      	adds	r5, #2
 8000b2c:	4e5b      	ldr	r6, [pc, #364]	; (8000c9c <HAL_GPIO_Init+0x184>)
 8000b2e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b32:	4c5b      	ldr	r4, [pc, #364]	; (8000ca0 <HAL_GPIO_Init+0x188>)
 8000b34:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b36:	43d4      	mvns	r4, r2
 8000b38:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b3c:	684f      	ldr	r7, [r1, #4]
 8000b3e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000b42:	d001      	beq.n	8000b48 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8000b44:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8000b48:	4d55      	ldr	r5, [pc, #340]	; (8000ca0 <HAL_GPIO_Init+0x188>)
 8000b4a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000b4c:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b4e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b52:	684f      	ldr	r7, [r1, #4]
 8000b54:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000b58:	d001      	beq.n	8000b5e <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8000b5a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8000b5e:	4d50      	ldr	r5, [pc, #320]	; (8000ca0 <HAL_GPIO_Init+0x188>)
 8000b60:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b62:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b64:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b68:	684f      	ldr	r7, [r1, #4]
 8000b6a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000b6e:	d001      	beq.n	8000b74 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8000b70:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000b74:	4d4a      	ldr	r5, [pc, #296]	; (8000ca0 <HAL_GPIO_Init+0x188>)
 8000b76:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000b78:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b7a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7c:	684e      	ldr	r6, [r1, #4]
 8000b7e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000b82:	d001      	beq.n	8000b88 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000b84:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000b88:	4a45      	ldr	r2, [pc, #276]	; (8000ca0 <HAL_GPIO_Init+0x188>)
 8000b8a:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8000b8c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b8e:	680a      	ldr	r2, [r1, #0]
 8000b90:	fa32 f403 	lsrs.w	r4, r2, r3
 8000b94:	d07e      	beq.n	8000c94 <HAL_GPIO_Init+0x17c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b96:	2401      	movs	r4, #1
 8000b98:	409c      	lsls	r4, r3
    if(iocurrent)
 8000b9a:	4022      	ands	r2, r4
 8000b9c:	d0f6      	beq.n	8000b8c <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b9e:	684d      	ldr	r5, [r1, #4]
 8000ba0:	2d02      	cmp	r5, #2
 8000ba2:	d001      	beq.n	8000ba8 <HAL_GPIO_Init+0x90>
 8000ba4:	2d12      	cmp	r5, #18
 8000ba6:	d110      	bne.n	8000bca <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3];
 8000ba8:	08de      	lsrs	r6, r3, #3
 8000baa:	3608      	adds	r6, #8
 8000bac:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bb0:	f003 0507 	and.w	r5, r3, #7
 8000bb4:	00af      	lsls	r7, r5, #2
 8000bb6:	250f      	movs	r5, #15
 8000bb8:	40bd      	lsls	r5, r7
 8000bba:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bbe:	690d      	ldr	r5, [r1, #16]
 8000bc0:	40bd      	lsls	r5, r7
 8000bc2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000bc6:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000bca:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bcc:	005f      	lsls	r7, r3, #1
 8000bce:	2503      	movs	r5, #3
 8000bd0:	40bd      	lsls	r5, r7
 8000bd2:	43ed      	mvns	r5, r5
 8000bd4:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd8:	684e      	ldr	r6, [r1, #4]
 8000bda:	f006 0603 	and.w	r6, r6, #3
 8000bde:	40be      	lsls	r6, r7
 8000be0:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8000be4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be6:	684e      	ldr	r6, [r1, #4]
 8000be8:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bec:	f1bc 0f01 	cmp.w	ip, #1
 8000bf0:	d903      	bls.n	8000bfa <HAL_GPIO_Init+0xe2>
 8000bf2:	2e11      	cmp	r6, #17
 8000bf4:	d001      	beq.n	8000bfa <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf6:	2e12      	cmp	r6, #18
 8000bf8:	d110      	bne.n	8000c1c <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 8000bfa:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bfc:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c00:	68ce      	ldr	r6, [r1, #12]
 8000c02:	40be      	lsls	r6, r7
 8000c04:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8000c08:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c0a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0c:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c10:	684e      	ldr	r6, [r1, #4]
 8000c12:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000c16:	409e      	lsls	r6, r3
 8000c18:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8000c1a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c1c:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c1e:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c20:	688c      	ldr	r4, [r1, #8]
 8000c22:	40bc      	lsls	r4, r7
 8000c24:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000c26:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c28:	684c      	ldr	r4, [r1, #4]
 8000c2a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000c2e:	d0ad      	beq.n	8000b8c <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c30:	4c1c      	ldr	r4, [pc, #112]	; (8000ca4 <HAL_GPIO_Init+0x18c>)
 8000c32:	69a5      	ldr	r5, [r4, #24]
 8000c34:	f045 0501 	orr.w	r5, r5, #1
 8000c38:	61a5      	str	r5, [r4, #24]
 8000c3a:	69a4      	ldr	r4, [r4, #24]
 8000c3c:	f004 0401 	and.w	r4, r4, #1
 8000c40:	9401      	str	r4, [sp, #4]
 8000c42:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000c44:	089d      	lsrs	r5, r3, #2
 8000c46:	1cae      	adds	r6, r5, #2
 8000c48:	4c14      	ldr	r4, [pc, #80]	; (8000c9c <HAL_GPIO_Init+0x184>)
 8000c4a:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c4e:	f003 0403 	and.w	r4, r3, #3
 8000c52:	00a6      	lsls	r6, r4, #2
 8000c54:	240f      	movs	r4, #15
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c5c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000c60:	f43f af60 	beq.w	8000b24 <HAL_GPIO_Init+0xc>
 8000c64:	4c10      	ldr	r4, [pc, #64]	; (8000ca8 <HAL_GPIO_Init+0x190>)
 8000c66:	42a0      	cmp	r0, r4
 8000c68:	d00e      	beq.n	8000c88 <HAL_GPIO_Init+0x170>
 8000c6a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c6e:	42a0      	cmp	r0, r4
 8000c70:	d00c      	beq.n	8000c8c <HAL_GPIO_Init+0x174>
 8000c72:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c76:	42a0      	cmp	r0, r4
 8000c78:	d00a      	beq.n	8000c90 <HAL_GPIO_Init+0x178>
 8000c7a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c7e:	42a0      	cmp	r0, r4
 8000c80:	f43f af4e 	beq.w	8000b20 <HAL_GPIO_Init+0x8>
 8000c84:	2405      	movs	r4, #5
 8000c86:	e74e      	b.n	8000b26 <HAL_GPIO_Init+0xe>
 8000c88:	2401      	movs	r4, #1
 8000c8a:	e74c      	b.n	8000b26 <HAL_GPIO_Init+0xe>
 8000c8c:	2402      	movs	r4, #2
 8000c8e:	e74a      	b.n	8000b26 <HAL_GPIO_Init+0xe>
 8000c90:	2403      	movs	r4, #3
 8000c92:	e748      	b.n	8000b26 <HAL_GPIO_Init+0xe>
  }
}
 8000c94:	b002      	add	sp, #8
 8000c96:	bcf0      	pop	{r4, r5, r6, r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	40010400 	.word	0x40010400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000400 	.word	0x48000400

08000cac <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8000cac:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 8000cae:	e070      	b.n	8000d92 <HAL_GPIO_DeInit+0xe6>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000cb0:	2504      	movs	r5, #4
 8000cb2:	e000      	b.n	8000cb6 <HAL_GPIO_DeInit+0xa>
 8000cb4:	2500      	movs	r5, #0
 8000cb6:	fa05 f202 	lsl.w	r2, r5, r2
 8000cba:	42a2      	cmp	r2, r4
 8000cbc:	d04b      	beq.n	8000d56 <HAL_GPIO_DeInit+0xaa>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
    
    position++;
 8000cbe:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != RESET)
 8000cc0:	fa31 f203 	lsrs.w	r2, r1, r3
 8000cc4:	d063      	beq.n	8000d8e <HAL_GPIO_DeInit+0xe2>
    iocurrent = GPIO_Pin & (1U << position);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	409a      	lsls	r2, r3
    if (iocurrent)
 8000cca:	ea12 0c01 	ands.w	ip, r2, r1
 8000cce:	d0f6      	beq.n	8000cbe <HAL_GPIO_DeInit+0x12>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd0:	6805      	ldr	r5, [r0, #0]
 8000cd2:	005e      	lsls	r6, r3, #1
 8000cd4:	2403      	movs	r4, #3
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	43e4      	mvns	r4, r4
 8000cda:	4025      	ands	r5, r4
 8000cdc:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cde:	08df      	lsrs	r7, r3, #3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
 8000ce6:	f003 0507 	and.w	r5, r3, #7
 8000cea:	00ad      	lsls	r5, r5, #2
 8000cec:	260f      	movs	r6, #15
 8000cee:	fa06 f505 	lsl.w	r5, r6, r5
 8000cf2:	ea2e 0505 	bic.w	r5, lr, r5
 8000cf6:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cfa:	6885      	ldr	r5, [r0, #8]
 8000cfc:	4025      	ands	r5, r4
 8000cfe:	6085      	str	r5, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d00:	6845      	ldr	r5, [r0, #4]
 8000d02:	ea25 0202 	bic.w	r2, r5, r2
 8000d06:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d08:	68c2      	ldr	r2, [r0, #12]
 8000d0a:	4014      	ands	r4, r2
 8000d0c:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8000d0e:	089f      	lsrs	r7, r3, #2
 8000d10:	1cbc      	adds	r4, r7, #2
 8000d12:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <HAL_GPIO_DeInit+0xfc>)
 8000d14:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8000d18:	f003 0203 	and.w	r2, r3, #3
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	4096      	lsls	r6, r2
 8000d20:	4034      	ands	r4, r6
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000d22:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000d26:	d0c5      	beq.n	8000cb4 <HAL_GPIO_DeInit+0x8>
 8000d28:	4d20      	ldr	r5, [pc, #128]	; (8000dac <HAL_GPIO_DeInit+0x100>)
 8000d2a:	42a8      	cmp	r0, r5
 8000d2c:	d00d      	beq.n	8000d4a <HAL_GPIO_DeInit+0x9e>
 8000d2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d32:	42a8      	cmp	r0, r5
 8000d34:	d00b      	beq.n	8000d4e <HAL_GPIO_DeInit+0xa2>
 8000d36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d3a:	42a8      	cmp	r0, r5
 8000d3c:	d009      	beq.n	8000d52 <HAL_GPIO_DeInit+0xa6>
 8000d3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d42:	42a8      	cmp	r0, r5
 8000d44:	d0b4      	beq.n	8000cb0 <HAL_GPIO_DeInit+0x4>
 8000d46:	2505      	movs	r5, #5
 8000d48:	e7b5      	b.n	8000cb6 <HAL_GPIO_DeInit+0xa>
 8000d4a:	2501      	movs	r5, #1
 8000d4c:	e7b3      	b.n	8000cb6 <HAL_GPIO_DeInit+0xa>
 8000d4e:	2502      	movs	r5, #2
 8000d50:	e7b1      	b.n	8000cb6 <HAL_GPIO_DeInit+0xa>
 8000d52:	2503      	movs	r5, #3
 8000d54:	e7af      	b.n	8000cb6 <HAL_GPIO_DeInit+0xa>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000d56:	4d14      	ldr	r5, [pc, #80]	; (8000da8 <HAL_GPIO_DeInit+0xfc>)
 8000d58:	1cba      	adds	r2, r7, #2
 8000d5a:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8000d5e:	ea24 0606 	bic.w	r6, r4, r6
 8000d62:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000d66:	4c12      	ldr	r4, [pc, #72]	; (8000db0 <HAL_GPIO_DeInit+0x104>)
 8000d68:	6822      	ldr	r2, [r4, #0]
 8000d6a:	ea6f 0c0c 	mvn.w	ip, ip
 8000d6e:	ea02 020c 	and.w	r2, r2, ip
 8000d72:	6022      	str	r2, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000d74:	6862      	ldr	r2, [r4, #4]
 8000d76:	ea0c 0202 	and.w	r2, ip, r2
 8000d7a:	6062      	str	r2, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000d7c:	68a2      	ldr	r2, [r4, #8]
 8000d7e:	ea0c 0202 	and.w	r2, ip, r2
 8000d82:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000d84:	68e2      	ldr	r2, [r4, #12]
 8000d86:	ea0c 0202 	and.w	r2, ip, r2
 8000d8a:	60e2      	str	r2, [r4, #12]
 8000d8c:	e797      	b.n	8000cbe <HAL_GPIO_DeInit+0x12>
  }
}
 8000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8000d90:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != RESET)
 8000d92:	fa31 f203 	lsrs.w	r2, r1, r3
 8000d96:	d006      	beq.n	8000da6 <HAL_GPIO_DeInit+0xfa>
    iocurrent = GPIO_Pin & (1U << position);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	409a      	lsls	r2, r3
    if (iocurrent)
 8000d9c:	ea12 0c01 	ands.w	ip, r2, r1
 8000da0:	d0f6      	beq.n	8000d90 <HAL_GPIO_DeInit+0xe4>
{
 8000da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da4:	e794      	b.n	8000cd0 <HAL_GPIO_DeInit+0x24>
 8000da6:	4770      	bx	lr
 8000da8:	40010000 	.word	0x40010000
 8000dac:	48000400 	.word	0x48000400
 8000db0:	40010400 	.word	0x40010400

08000db4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db4:	b90a      	cbnz	r2, 8000dba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000db8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dba:	6181      	str	r1, [r0, #24]
 8000dbc:	4770      	bx	lr

08000dbe <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000dbe:	6803      	ldr	r3, [r0, #0]
 8000dc0:	699a      	ldr	r2, [r3, #24]
 8000dc2:	f012 0f02 	tst.w	r2, #2
 8000dc6:	d001      	beq.n	8000dcc <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000dcc:	6803      	ldr	r3, [r0, #0]
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	f012 0f01 	tst.w	r2, #1
 8000dd4:	d103      	bne.n	8000dde <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000dd6:	699a      	ldr	r2, [r3, #24]
 8000dd8:	f042 0201 	orr.w	r2, r2, #1
 8000ddc:	619a      	str	r2, [r3, #24]
  }
}
 8000dde:	4770      	bx	lr

08000de0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000de0:	b470      	push	{r4, r5, r6}
 8000de2:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000de4:	6805      	ldr	r5, [r0, #0]
 8000de6:	6868      	ldr	r0, [r5, #4]
 8000de8:	0d74      	lsrs	r4, r6, #21
 8000dea:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000dee:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000df2:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000df6:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000dfa:	f044 0403 	orr.w	r4, r4, #3
 8000dfe:	ea20 0004 	bic.w	r0, r0, r4
 8000e02:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000e06:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e0a:	4319      	orrs	r1, r3
 8000e0c:	4331      	orrs	r1, r6
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000e12:	bc70      	pop	{r4, r5, r6}
 8000e14:	4770      	bx	lr

08000e16 <I2C_IsAcknowledgeFailed>:
{
 8000e16:	b570      	push	{r4, r5, r6, lr}
 8000e18:	4604      	mov	r4, r0
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e1e:	6803      	ldr	r3, [r0, #0]
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f013 0f10 	tst.w	r3, #16
 8000e26:	d017      	beq.n	8000e58 <I2C_IsAcknowledgeFailed+0x42>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	699a      	ldr	r2, [r3, #24]
 8000e2c:	f012 0f20 	tst.w	r2, #32
 8000e30:	d114      	bne.n	8000e5c <I2C_IsAcknowledgeFailed+0x46>
      if (Timeout != HAL_MAX_DELAY)
 8000e32:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000e36:	d0f7      	beq.n	8000e28 <I2C_IsAcknowledgeFailed+0x12>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e38:	b125      	cbz	r5, 8000e44 <I2C_IsAcknowledgeFailed+0x2e>
 8000e3a:	f7ff fdd5 	bl	80009e8 <HAL_GetTick>
 8000e3e:	1b80      	subs	r0, r0, r6
 8000e40:	42a8      	cmp	r0, r5
 8000e42:	d9f1      	bls.n	8000e28 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->State = HAL_I2C_STATE_READY;
 8000e44:	2320      	movs	r3, #32
 8000e46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000e50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8000e54:	2003      	movs	r0, #3
 8000e56:	e01e      	b.n	8000e96 <I2C_IsAcknowledgeFailed+0x80>
  return HAL_OK;
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e01c      	b.n	8000e96 <I2C_IsAcknowledgeFailed+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	2520      	movs	r5, #32
 8000e64:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff ffa9 	bl	8000dbe <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000e6c:	6822      	ldr	r2, [r4, #0]
 8000e6e:	6853      	ldr	r3, [r2, #4]
 8000e70:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000e74:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000e78:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e82:	2304      	movs	r3, #4
 8000e84:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000e86:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000e90:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000e94:	2001      	movs	r0, #1
}
 8000e96:	bd70      	pop	{r4, r5, r6, pc}

08000e98 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000e98:	b570      	push	{r4, r5, r6, lr}
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	460d      	mov	r5, r1
 8000e9e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ea0:	6823      	ldr	r3, [r4, #0]
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f013 0f02 	tst.w	r3, #2
 8000ea8:	d11c      	bne.n	8000ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000eaa:	4632      	mov	r2, r6
 8000eac:	4629      	mov	r1, r5
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f7ff ffb1 	bl	8000e16 <I2C_IsAcknowledgeFailed>
 8000eb4:	b9c0      	cbnz	r0, 8000ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000eb6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000eba:	d0f1      	beq.n	8000ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ebc:	b125      	cbz	r5, 8000ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8000ebe:	f7ff fd93 	bl	80009e8 <HAL_GetTick>
 8000ec2:	1b80      	subs	r0, r0, r6
 8000ec4:	42a8      	cmp	r0, r5
 8000ec6:	d9eb      	bls.n	8000ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ec8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000edc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	e000      	b.n	8000ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000ee4:	2000      	movs	r0, #0
}
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000ee8:	2001      	movs	r0, #1
 8000eea:	e7fc      	b.n	8000ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08000eec <I2C_WaitOnFlagUntilTimeout>:
{
 8000eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eee:	4605      	mov	r5, r0
 8000ef0:	460f      	mov	r7, r1
 8000ef2:	4616      	mov	r6, r2
 8000ef4:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	ea37 0303 	bics.w	r3, r7, r3
 8000efe:	bf0c      	ite	eq
 8000f00:	2301      	moveq	r3, #1
 8000f02:	2300      	movne	r3, #0
 8000f04:	42b3      	cmp	r3, r6
 8000f06:	d113      	bne.n	8000f30 <I2C_WaitOnFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8000f08:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f0c:	d0f3      	beq.n	8000ef6 <I2C_WaitOnFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f0e:	b12c      	cbz	r4, 8000f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8000f10:	f7ff fd6a 	bl	80009e8 <HAL_GetTick>
 8000f14:	9b06      	ldr	r3, [sp, #24]
 8000f16:	1ac0      	subs	r0, r0, r3
 8000f18:	42a0      	cmp	r0, r4
 8000f1a:	d9ec      	bls.n	8000ef6 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->State = HAL_I2C_STATE_READY;
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000f28:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	e000      	b.n	8000f32 <I2C_WaitOnFlagUntilTimeout+0x46>
  return HAL_OK;
 8000f30:	2000      	movs	r0, #0
}
 8000f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000f34 <I2C_RequestMemoryWrite>:
{
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	4604      	mov	r4, r0
 8000f3a:	4616      	mov	r6, r2
 8000f3c:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <I2C_RequestMemoryWrite+0x84>)
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f46:	b2ea      	uxtb	r2, r5
 8000f48:	f7ff ff4a 	bl	8000de0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f4c:	9a07      	ldr	r2, [sp, #28]
 8000f4e:	9906      	ldr	r1, [sp, #24]
 8000f50:	4620      	mov	r0, r4
 8000f52:	f7ff ffa1 	bl	8000e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f56:	b130      	cbz	r0, 8000f66 <I2C_RequestMemoryWrite+0x32>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d127      	bne.n	8000fae <I2C_RequestMemoryWrite+0x7a>
      return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	b002      	add	sp, #8
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f66:	2d01      	cmp	r5, #1
 8000f68:	d10f      	bne.n	8000f8a <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	b2f6      	uxtb	r6, r6
 8000f6e:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000f70:	9b07      	ldr	r3, [sp, #28]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	9b06      	ldr	r3, [sp, #24]
 8000f76:	2200      	movs	r2, #0
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f7ff ffb6 	bl	8000eec <I2C_WaitOnFlagUntilTimeout>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d0ec      	beq.n	8000f60 <I2C_RequestMemoryWrite+0x2c>
    return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e7ea      	b.n	8000f60 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	0a32      	lsrs	r2, r6, #8
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f90:	9a07      	ldr	r2, [sp, #28]
 8000f92:	9906      	ldr	r1, [sp, #24]
 8000f94:	4620      	mov	r0, r4
 8000f96:	f7ff ff7f 	bl	8000e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f9a:	b120      	cbz	r0, 8000fa6 <I2C_RequestMemoryWrite+0x72>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d107      	bne.n	8000fb2 <I2C_RequestMemoryWrite+0x7e>
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e7dc      	b.n	8000f60 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	b2f6      	uxtb	r6, r6
 8000faa:	629e      	str	r6, [r3, #40]	; 0x28
 8000fac:	e7e0      	b.n	8000f70 <I2C_RequestMemoryWrite+0x3c>
      return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e7d6      	b.n	8000f60 <I2C_RequestMemoryWrite+0x2c>
        return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e7d4      	b.n	8000f60 <I2C_RequestMemoryWrite+0x2c>
 8000fb6:	bf00      	nop
 8000fb8:	80002000 	.word	0x80002000

08000fbc <I2C_RequestMemoryRead>:
{
 8000fbc:	b570      	push	{r4, r5, r6, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	4616      	mov	r6, r2
 8000fc4:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <I2C_RequestMemoryRead+0x80>)
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	b2ea      	uxtb	r2, r5
 8000fce:	f7ff ff07 	bl	8000de0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fd2:	9a07      	ldr	r2, [sp, #28]
 8000fd4:	9906      	ldr	r1, [sp, #24]
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f7ff ff5e 	bl	8000e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8000fdc:	b130      	cbz	r0, 8000fec <I2C_RequestMemoryRead+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d127      	bne.n	8001034 <I2C_RequestMemoryRead+0x78>
      return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000fec:	2d01      	cmp	r5, #1
 8000fee:	d10f      	bne.n	8001010 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	b2f6      	uxtb	r6, r6
 8000ff4:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000ff6:	9b07      	ldr	r3, [sp, #28]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	9b06      	ldr	r3, [sp, #24]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	4620      	mov	r0, r4
 8001002:	f7ff ff73 	bl	8000eec <I2C_WaitOnFlagUntilTimeout>
 8001006:	4603      	mov	r3, r0
 8001008:	2800      	cmp	r0, #0
 800100a:	d0ec      	beq.n	8000fe6 <I2C_RequestMemoryRead+0x2a>
    return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e7ea      	b.n	8000fe6 <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	0a32      	lsrs	r2, r6, #8
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001016:	9a07      	ldr	r2, [sp, #28]
 8001018:	9906      	ldr	r1, [sp, #24]
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff ff3c 	bl	8000e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8001020:	b120      	cbz	r0, 800102c <I2C_RequestMemoryRead+0x70>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001022:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001024:	2b04      	cmp	r3, #4
 8001026:	d107      	bne.n	8001038 <I2C_RequestMemoryRead+0x7c>
        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e7dc      	b.n	8000fe6 <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	b2f6      	uxtb	r6, r6
 8001030:	629e      	str	r6, [r3, #40]	; 0x28
 8001032:	e7e0      	b.n	8000ff6 <I2C_RequestMemoryRead+0x3a>
      return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e7d6      	b.n	8000fe6 <I2C_RequestMemoryRead+0x2a>
        return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e7d4      	b.n	8000fe6 <I2C_RequestMemoryRead+0x2a>
 800103c:	80002000 	.word	0x80002000

08001040 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	4605      	mov	r5, r0
 8001044:	460c      	mov	r4, r1
 8001046:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001048:	682b      	ldr	r3, [r5, #0]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f013 0f20 	tst.w	r3, #32
 8001050:	d119      	bne.n	8001086 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001052:	4632      	mov	r2, r6
 8001054:	4621      	mov	r1, r4
 8001056:	4628      	mov	r0, r5
 8001058:	f7ff fedd 	bl	8000e16 <I2C_IsAcknowledgeFailed>
 800105c:	b9a8      	cbnz	r0, 800108a <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800105e:	b124      	cbz	r4, 800106a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8001060:	f7ff fcc2 	bl	80009e8 <HAL_GetTick>
 8001064:	1b80      	subs	r0, r0, r6
 8001066:	42a0      	cmp	r0, r4
 8001068:	d9ee      	bls.n	8001048 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800106a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800106c:	f043 0320 	orr.w	r3, r3, #32
 8001070:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001072:	2320      	movs	r3, #32
 8001074:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001078:	2300      	movs	r3, #0
 800107a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800107e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 8001082:	2003      	movs	r0, #3
}
 8001084:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001086:	2000      	movs	r0, #0
 8001088:	e7fc      	b.n	8001084 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
 800108c:	e7fa      	b.n	8001084 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

0800108e <HAL_I2C_Init>:
  if (hi2c == NULL)
 800108e:	2800      	cmp	r0, #0
 8001090:	d059      	beq.n	8001146 <HAL_I2C_Init+0xb8>
{
 8001092:	b510      	push	{r4, lr}
 8001094:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001096:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800109a:	2b00      	cmp	r3, #0
 800109c:	d043      	beq.n	8001126 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800109e:	2324      	movs	r3, #36	; 0x24
 80010a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80010a4:	6822      	ldr	r2, [r4, #0]
 80010a6:	6813      	ldr	r3, [r2, #0]
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010ae:	6863      	ldr	r3, [r4, #4]
 80010b0:	6822      	ldr	r2, [r4, #0]
 80010b2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80010b6:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010b8:	6822      	ldr	r2, [r4, #0]
 80010ba:	6893      	ldr	r3, [r2, #8]
 80010bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010c0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010c2:	68e3      	ldr	r3, [r4, #12]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d033      	beq.n	8001130 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010c8:	68a3      	ldr	r3, [r4, #8]
 80010ca:	6822      	ldr	r2, [r4, #0]
 80010cc:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80010d0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010d2:	68e3      	ldr	r3, [r4, #12]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d031      	beq.n	800113c <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010d8:	6822      	ldr	r2, [r4, #0]
 80010da:	6853      	ldr	r3, [r2, #4]
 80010dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e4:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	68d3      	ldr	r3, [r2, #12]
 80010ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010ee:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010f0:	6923      	ldr	r3, [r4, #16]
 80010f2:	6962      	ldr	r2, [r4, #20]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	69a1      	ldr	r1, [r4, #24]
 80010f8:	6822      	ldr	r2, [r4, #0]
 80010fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80010fe:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001100:	69e3      	ldr	r3, [r4, #28]
 8001102:	6a21      	ldr	r1, [r4, #32]
 8001104:	6822      	ldr	r2, [r4, #0]
 8001106:	430b      	orrs	r3, r1
 8001108:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800110a:	6822      	ldr	r2, [r4, #0]
 800110c:	6813      	ldr	r3, [r2, #0]
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001114:	2000      	movs	r0, #0
 8001116:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001118:	2320      	movs	r3, #32
 800111a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800111e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001120:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001124:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001126:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800112a:	f001 f9f7 	bl	800251c <HAL_I2C_MspInit>
 800112e:	e7b6      	b.n	800109e <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001130:	68a3      	ldr	r3, [r4, #8]
 8001132:	6822      	ldr	r2, [r4, #0]
 8001134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001138:	6093      	str	r3, [r2, #8]
 800113a:	e7ca      	b.n	80010d2 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	e7c8      	b.n	80010d8 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001146:	2001      	movs	r0, #1
}
 8001148:	4770      	bx	lr

0800114a <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800114a:	b1a8      	cbz	r0, 8001178 <HAL_I2C_DeInit+0x2e>
{
 800114c:	b510      	push	{r4, lr}
 800114e:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001150:	2324      	movs	r3, #36	; 0x24
 8001152:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001156:	6802      	ldr	r2, [r0, #0]
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f023 0301 	bic.w	r3, r3, #1
 800115e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001160:	f001 fa2e 	bl	80025c0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001164:	2000      	movs	r0, #0
 8001166:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001168:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800116c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800116e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8001172:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001176:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001178:	2001      	movs	r0, #1
}
 800117a:	4770      	bx	lr

0800117c <HAL_I2C_Mem_Write>:
{
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001186:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800118a:	b2ed      	uxtb	r5, r5
 800118c:	2d20      	cmp	r5, #32
 800118e:	f040 80cb 	bne.w	8001328 <HAL_I2C_Mem_Write+0x1ac>
    if ((pData == NULL) || (Size == 0U))
 8001192:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001194:	2c00      	cmp	r4, #0
 8001196:	f000 80cc 	beq.w	8001332 <HAL_I2C_Mem_Write+0x1b6>
 800119a:	2f00      	cmp	r7, #0
 800119c:	f000 80cb 	beq.w	8001336 <HAL_I2C_Mem_Write+0x1ba>
    __HAL_LOCK(hi2c);
 80011a0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80011a4:	2c01      	cmp	r4, #1
 80011a6:	f000 80c8 	beq.w	800133a <HAL_I2C_Mem_Write+0x1be>
 80011aa:	4698      	mov	r8, r3
 80011ac:	4691      	mov	r9, r2
 80011ae:	460d      	mov	r5, r1
 80011b0:	4604      	mov	r4, r0
 80011b2:	f04f 0a01 	mov.w	sl, #1
 80011b6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80011ba:	f7ff fc15 	bl	80009e8 <HAL_GetTick>
 80011be:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011c0:	9000      	str	r0, [sp, #0]
 80011c2:	2319      	movs	r3, #25
 80011c4:	4652      	mov	r2, sl
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff fe8e 	bl	8000eec <I2C_WaitOnFlagUntilTimeout>
 80011d0:	2800      	cmp	r0, #0
 80011d2:	f040 80b4 	bne.w	800133e <HAL_I2C_Mem_Write+0x1c2>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011d6:	2321      	movs	r3, #33	; 0x21
 80011d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011dc:	2340      	movs	r3, #64	; 0x40
 80011de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80011e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80011e8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80011ea:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011ec:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011ee:	9601      	str	r6, [sp, #4]
 80011f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	4643      	mov	r3, r8
 80011f6:	464a      	mov	r2, r9
 80011f8:	4629      	mov	r1, r5
 80011fa:	4620      	mov	r0, r4
 80011fc:	f7ff fe9a 	bl	8000f34 <I2C_RequestMemoryWrite>
 8001200:	b160      	cbz	r0, 800121c <HAL_I2C_Mem_Write+0xa0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001202:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001204:	2b04      	cmp	r3, #4
 8001206:	d104      	bne.n	8001212 <HAL_I2C_Mem_Write+0x96>
        __HAL_UNLOCK(hi2c);
 8001208:	2300      	movs	r3, #0
 800120a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800120e:	4653      	mov	r3, sl
 8001210:	e08b      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
        __HAL_UNLOCK(hi2c);
 8001212:	2300      	movs	r3, #0
 8001214:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e086      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800121c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800121e:	b29b      	uxth	r3, r3
 8001220:	2bff      	cmp	r3, #255	; 0xff
 8001222:	d90a      	bls.n	800123a <HAL_I2C_Mem_Write+0xbe>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001224:	22ff      	movs	r2, #255	; 0xff
 8001226:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001228:	2300      	movs	r3, #0
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001230:	4629      	mov	r1, r5
 8001232:	4620      	mov	r0, r4
 8001234:	f7ff fdd4 	bl	8000de0 <I2C_TransferConfig>
 8001238:	e021      	b.n	800127e <HAL_I2C_Mem_Write+0x102>
      hi2c->XferSize = hi2c->XferCount;
 800123a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800123c:	b292      	uxth	r2, r2
 800123e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001240:	2300      	movs	r3, #0
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	4629      	mov	r1, r5
 800124c:	4620      	mov	r0, r4
 800124e:	f7ff fdc7 	bl	8000de0 <I2C_TransferConfig>
 8001252:	e014      	b.n	800127e <HAL_I2C_Mem_Write+0x102>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001254:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001256:	2b04      	cmp	r3, #4
 8001258:	d173      	bne.n	8001342 <HAL_I2C_Mem_Write+0x1c6>
          return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e065      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
          hi2c->XferSize = hi2c->XferCount;
 800125e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001260:	b292      	uxth	r2, r2
 8001262:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001264:	2300      	movs	r3, #0
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	4629      	mov	r1, r5
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fdb5 	bl	8000de0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001276:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d032      	beq.n	80012e4 <HAL_I2C_Mem_Write+0x168>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800127e:	4632      	mov	r2, r6
 8001280:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff fe08 	bl	8000e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8001288:	2800      	cmp	r0, #0
 800128a:	d1e3      	bne.n	8001254 <HAL_I2C_Mem_Write+0xd8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800128c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	6262      	str	r2, [r4, #36]	; 0x24
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001298:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800129a:	3b01      	subs	r3, #1
 800129c:	b29b      	uxth	r3, r3
 800129e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80012a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e4      	bne.n	8001276 <HAL_I2C_Mem_Write+0xfa>
 80012ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0e0      	beq.n	8001276 <HAL_I2C_Mem_Write+0xfa>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012b4:	9600      	str	r6, [sp, #0]
 80012b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80012b8:	2200      	movs	r2, #0
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff fe15 	bl	8000eec <I2C_WaitOnFlagUntilTimeout>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d13f      	bne.n	8001346 <HAL_I2C_Mem_Write+0x1ca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d9c7      	bls.n	800125e <HAL_I2C_Mem_Write+0xe2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ce:	22ff      	movs	r2, #255	; 0xff
 80012d0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012d2:	2300      	movs	r3, #0
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012da:	4629      	mov	r1, r5
 80012dc:	4620      	mov	r0, r4
 80012de:	f7ff fd7f 	bl	8000de0 <I2C_TransferConfig>
 80012e2:	e7c8      	b.n	8001276 <HAL_I2C_Mem_Write+0xfa>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e4:	4632      	mov	r2, r6
 80012e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80012e8:	4620      	mov	r0, r4
 80012ea:	f7ff fea9 	bl	8001040 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b120      	cbz	r0, 80012fc <HAL_I2C_Mem_Write+0x180>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d128      	bne.n	800134a <HAL_I2C_Mem_Write+0x1ce>
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e016      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012fc:	6822      	ldr	r2, [r4, #0]
 80012fe:	2120      	movs	r1, #32
 8001300:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001302:	6820      	ldr	r0, [r4, #0]
 8001304:	6842      	ldr	r2, [r0, #4]
 8001306:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800130a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800130e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001318:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800131c:	2200      	movs	r2, #0
 800131e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001322:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001326:	e000      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
    return HAL_BUSY;
 8001328:	2302      	movs	r3, #2
}
 800132a:	4618      	mov	r0, r3
 800132c:	b002      	add	sp, #8
 800132e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e7f9      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
 8001336:	2301      	movs	r3, #1
 8001338:	e7f7      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
    __HAL_LOCK(hi2c);
 800133a:	2302      	movs	r3, #2
 800133c:	e7f5      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
      return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e7f3      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e7f1      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e7ef      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e7ed      	b.n	800132a <HAL_I2C_Mem_Write+0x1ae>
	...

08001350 <HAL_I2C_Mem_Read>:
{
 8001350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800135a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800135e:	b2ed      	uxtb	r5, r5
 8001360:	2d20      	cmp	r5, #32
 8001362:	f040 80c8 	bne.w	80014f6 <HAL_I2C_Mem_Read+0x1a6>
    if ((pData == NULL) || (Size == 0U))
 8001366:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001368:	2c00      	cmp	r4, #0
 800136a:	f000 80c9 	beq.w	8001500 <HAL_I2C_Mem_Read+0x1b0>
 800136e:	2f00      	cmp	r7, #0
 8001370:	f000 80c8 	beq.w	8001504 <HAL_I2C_Mem_Read+0x1b4>
    __HAL_LOCK(hi2c);
 8001374:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001378:	2c01      	cmp	r4, #1
 800137a:	f000 80c5 	beq.w	8001508 <HAL_I2C_Mem_Read+0x1b8>
 800137e:	4698      	mov	r8, r3
 8001380:	4691      	mov	r9, r2
 8001382:	460d      	mov	r5, r1
 8001384:	4604      	mov	r4, r0
 8001386:	f04f 0a01 	mov.w	sl, #1
 800138a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800138e:	f7ff fb2b 	bl	80009e8 <HAL_GetTick>
 8001392:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001394:	9000      	str	r0, [sp, #0]
 8001396:	2319      	movs	r3, #25
 8001398:	4652      	mov	r2, sl
 800139a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800139e:	4620      	mov	r0, r4
 80013a0:	f7ff fda4 	bl	8000eec <I2C_WaitOnFlagUntilTimeout>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	f040 80b1 	bne.w	800150c <HAL_I2C_Mem_Read+0x1bc>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013aa:	2322      	movs	r3, #34	; 0x22
 80013ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013b0:	2340      	movs	r3, #64	; 0x40
 80013b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80013ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80013bc:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80013be:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013c0:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013c2:	9601      	str	r6, [sp, #4]
 80013c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4643      	mov	r3, r8
 80013ca:	464a      	mov	r2, r9
 80013cc:	4629      	mov	r1, r5
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff fdf4 	bl	8000fbc <I2C_RequestMemoryRead>
 80013d4:	b160      	cbz	r0, 80013f0 <HAL_I2C_Mem_Read+0xa0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d104      	bne.n	80013e6 <HAL_I2C_Mem_Read+0x96>
        __HAL_UNLOCK(hi2c);
 80013dc:	2300      	movs	r3, #0
 80013de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80013e2:	4653      	mov	r3, sl
 80013e4:	e088      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
        __HAL_UNLOCK(hi2c);
 80013e6:	2300      	movs	r3, #0
 80013e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e083      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2bff      	cmp	r3, #255	; 0xff
 80013f6:	d90a      	bls.n	800140e <HAL_I2C_Mem_Read+0xbe>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013f8:	22ff      	movs	r2, #255	; 0xff
 80013fa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80013fc:	4b47      	ldr	r3, [pc, #284]	; (800151c <HAL_I2C_Mem_Read+0x1cc>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001404:	4629      	mov	r1, r5
 8001406:	4620      	mov	r0, r4
 8001408:	f7ff fcea 	bl	8000de0 <I2C_TransferConfig>
 800140c:	e01c      	b.n	8001448 <HAL_I2C_Mem_Read+0xf8>
      hi2c->XferSize = hi2c->XferCount;
 800140e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001410:	b292      	uxth	r2, r2
 8001412:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001414:	4b41      	ldr	r3, [pc, #260]	; (800151c <HAL_I2C_Mem_Read+0x1cc>)
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	4629      	mov	r1, r5
 8001420:	4620      	mov	r0, r4
 8001422:	f7ff fcdd 	bl	8000de0 <I2C_TransferConfig>
 8001426:	e00f      	b.n	8001448 <HAL_I2C_Mem_Read+0xf8>
          hi2c->XferSize = hi2c->XferCount;
 8001428:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800142a:	b292      	uxth	r2, r2
 800142c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800142e:	2300      	movs	r3, #0
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	4629      	mov	r1, r5
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff fcd0 	bl	8000de0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001440:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001442:	b29b      	uxth	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d034      	beq.n	80014b2 <HAL_I2C_Mem_Read+0x162>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001448:	9600      	str	r6, [sp, #0]
 800144a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800144c:	2200      	movs	r2, #0
 800144e:	2104      	movs	r1, #4
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff fd4b 	bl	8000eec <I2C_WaitOnFlagUntilTimeout>
 8001456:	2800      	cmp	r0, #0
 8001458:	d15a      	bne.n	8001510 <HAL_I2C_Mem_Read+0x1c0>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800145e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001460:	1c59      	adds	r1, r3, #1
 8001462:	6261      	str	r1, [r4, #36]	; 0x24
 8001464:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001466:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001468:	3b01      	subs	r3, #1
 800146a:	b29b      	uxth	r3, r3
 800146c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800146e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001470:	3a01      	subs	r2, #1
 8001472:	b292      	uxth	r2, r2
 8001474:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e2      	bne.n	8001440 <HAL_I2C_Mem_Read+0xf0>
 800147a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800147c:	b29b      	uxth	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0de      	beq.n	8001440 <HAL_I2C_Mem_Read+0xf0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001482:	9600      	str	r6, [sp, #0]
 8001484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001486:	2200      	movs	r2, #0
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	4620      	mov	r0, r4
 800148c:	f7ff fd2e 	bl	8000eec <I2C_WaitOnFlagUntilTimeout>
 8001490:	2800      	cmp	r0, #0
 8001492:	d13f      	bne.n	8001514 <HAL_I2C_Mem_Read+0x1c4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001494:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001496:	b29b      	uxth	r3, r3
 8001498:	2bff      	cmp	r3, #255	; 0xff
 800149a:	d9c5      	bls.n	8001428 <HAL_I2C_Mem_Read+0xd8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800149c:	22ff      	movs	r2, #255	; 0xff
 800149e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014a0:	2300      	movs	r3, #0
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a8:	4629      	mov	r1, r5
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff fc98 	bl	8000de0 <I2C_TransferConfig>
 80014b0:	e7c6      	b.n	8001440 <HAL_I2C_Mem_Read+0xf0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b2:	4632      	mov	r2, r6
 80014b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fdc2 	bl	8001040 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014bc:	4603      	mov	r3, r0
 80014be:	b120      	cbz	r0, 80014ca <HAL_I2C_Mem_Read+0x17a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d128      	bne.n	8001518 <HAL_I2C_Mem_Read+0x1c8>
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e016      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ca:	6822      	ldr	r2, [r4, #0]
 80014cc:	2120      	movs	r1, #32
 80014ce:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80014d0:	6820      	ldr	r0, [r4, #0]
 80014d2:	6842      	ldr	r2, [r0, #4]
 80014d4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80014d8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80014dc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80014e0:	f022 0201 	bic.w	r2, r2, #1
 80014e4:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80014e6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014ea:	2200      	movs	r2, #0
 80014ec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80014f0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80014f4:	e000      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
    return HAL_BUSY;
 80014f6:	2302      	movs	r3, #2
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	b002      	add	sp, #8
 80014fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e7f9      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
 8001504:	2301      	movs	r3, #1
 8001506:	e7f7      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_LOCK(hi2c);
 8001508:	2302      	movs	r3, #2
 800150a:	e7f5      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
      return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e7f3      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
        return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e7f1      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e7ef      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
        return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e7ed      	b.n	80014f8 <HAL_I2C_Mem_Read+0x1a8>
 800151c:	80002400 	.word	0x80002400

08001520 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001520:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b20      	cmp	r3, #32
 8001528:	d124      	bne.n	8001574 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800152e:	2b01      	cmp	r3, #1
 8001530:	d022      	beq.n	8001578 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001532:	2301      	movs	r3, #1
 8001534:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001538:	2324      	movs	r3, #36	; 0x24
 800153a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800153e:	6802      	ldr	r2, [r0, #0]
 8001540:	6813      	ldr	r3, [r2, #0]
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001548:	6802      	ldr	r2, [r0, #0]
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001550:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001552:	6802      	ldr	r2, [r0, #0]
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	4319      	orrs	r1, r3
 8001558:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800155a:	6802      	ldr	r2, [r0, #0]
 800155c:	6813      	ldr	r3, [r2, #0]
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001564:	2320      	movs	r3, #32
 8001566:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800156a:	2300      	movs	r3, #0
 800156c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001570:	4618      	mov	r0, r3
 8001572:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001574:	2002      	movs	r0, #2
 8001576:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001578:	2002      	movs	r0, #2
  }
}
 800157a:	4770      	bx	lr

0800157c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800157c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b20      	cmp	r3, #32
 8001584:	d122      	bne.n	80015cc <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001586:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800158a:	2b01      	cmp	r3, #1
 800158c:	d020      	beq.n	80015d0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800158e:	2301      	movs	r3, #1
 8001590:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001594:	2324      	movs	r3, #36	; 0x24
 8001596:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800159a:	6802      	ldr	r2, [r0, #0]
 800159c:	6813      	ldr	r3, [r2, #0]
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015a4:	6802      	ldr	r2, [r0, #0]
 80015a6:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015ac:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015b0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015b2:	6802      	ldr	r2, [r0, #0]
 80015b4:	6813      	ldr	r3, [r2, #0]
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015bc:	2320      	movs	r3, #32
 80015be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c2:	2300      	movs	r3, #0
 80015c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80015c8:	4618      	mov	r0, r3
 80015ca:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80015cc:	2002      	movs	r0, #2
 80015ce:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80015d0:	2002      	movs	r0, #2
  }
}
 80015d2:	4770      	bx	lr

080015d4 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d4:	2800      	cmp	r0, #0
 80015d6:	f000 82f5 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x5f0>
{
 80015da:	b570      	push	{r4, r5, r6, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e0:	6803      	ldr	r3, [r0, #0]
 80015e2:	f013 0f01 	tst.w	r3, #1
 80015e6:	d03b      	beq.n	8001660 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015e8:	4bb5      	ldr	r3, [pc, #724]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d01e      	beq.n	8001632 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f4:	4bb2      	ldr	r3, [pc, #712]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001600:	6863      	ldr	r3, [r4, #4]
 8001602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001606:	d068      	beq.n	80016da <HAL_RCC_OscConfig+0x106>
 8001608:	2b00      	cmp	r3, #0
 800160a:	f040 8092 	bne.w	8001732 <HAL_RCC_OscConfig+0x15e>
 800160e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001612:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e05d      	b.n	80016e4 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001628:	4ba5      	ldr	r3, [pc, #660]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001630:	d0e6      	beq.n	8001600 <HAL_RCC_OscConfig+0x2c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001636:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	4ba1      	ldr	r3, [pc, #644]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 800163c:	6819      	ldr	r1, [r3, #0]
 800163e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	2201      	movs	r2, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	420b      	tst	r3, r1
 8001656:	d003      	beq.n	8001660 <HAL_RCC_OscConfig+0x8c>
 8001658:	6863      	ldr	r3, [r4, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 82b4 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x5f4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	f013 0f02 	tst.w	r3, #2
 8001666:	f000 80c6 	beq.w	80017f6 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800166a:	4b95      	ldr	r3, [pc, #596]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f013 0f0c 	tst.w	r3, #12
 8001672:	f000 809c 	beq.w	80017ae <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001676:	4b92      	ldr	r3, [pc, #584]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	f000 808f 	beq.w	80017a2 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001684:	6923      	ldr	r3, [r4, #16]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80f3 	beq.w	8001872 <HAL_RCC_OscConfig+0x29e>
 800168c:	2201      	movs	r2, #1
 800168e:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800169a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff f9a1 	bl	80009e8 <HAL_GetTick>
 80016a6:	4605      	mov	r5, r0
 80016a8:	2302      	movs	r3, #2
 80016aa:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b84      	ldr	r3, [pc, #528]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	2302      	movs	r3, #2
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	2201      	movs	r2, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	420b      	tst	r3, r1
 80016c8:	f040 80c4 	bne.w	8001854 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016cc:	f7ff f98c 	bl	80009e8 <HAL_GetTick>
 80016d0:	1b40      	subs	r0, r0, r5
 80016d2:	2802      	cmp	r0, #2
 80016d4:	d9e8      	bls.n	80016a8 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80016d6:	2003      	movs	r0, #3
 80016d8:	e283      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016da:	4a79      	ldr	r2, [pc, #484]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016e4:	4a76      	ldr	r2, [pc, #472]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 80016e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016e8:	f023 030f 	bic.w	r3, r3, #15
 80016ec:	68a1      	ldr	r1, [r4, #8]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f2:	6863      	ldr	r3, [r4, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d036      	beq.n	8001766 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80016f8:	f7ff f976 	bl	80009e8 <HAL_GetTick>
 80016fc:	4605      	mov	r5, r0
 80016fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001702:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b6e      	ldr	r3, [pc, #440]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	2201      	movs	r2, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	420b      	tst	r3, r1
 8001722:	d19d      	bne.n	8001660 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff f960 	bl	80009e8 <HAL_GetTick>
 8001728:	1b40      	subs	r0, r0, r5
 800172a:	2864      	cmp	r0, #100	; 0x64
 800172c:	d9e7      	bls.n	80016fe <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800172e:	2003      	movs	r0, #3
 8001730:	e257      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001736:	d009      	beq.n	800174c <HAL_RCC_OscConfig+0x178>
 8001738:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e7cb      	b.n	80016e4 <HAL_RCC_OscConfig+0x110>
 800174c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001750:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e7be      	b.n	80016e4 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001766:	f7ff f93f 	bl	80009e8 <HAL_GetTick>
 800176a:	4605      	mov	r5, r0
 800176c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001770:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001774:	4b52      	ldr	r3, [pc, #328]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	2201      	movs	r2, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	420b      	tst	r3, r1
 8001790:	f43f af66 	beq.w	8001660 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff f928 	bl	80009e8 <HAL_GetTick>
 8001798:	1b40      	subs	r0, r0, r5
 800179a:	2864      	cmp	r0, #100	; 0x64
 800179c:	d9e6      	bls.n	800176c <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 800179e:	2003      	movs	r0, #3
 80017a0:	e21f      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017a2:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80017aa:	f47f af6b 	bne.w	8001684 <HAL_RCC_OscConfig+0xb0>
 80017ae:	2302      	movs	r3, #2
 80017b0:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b4:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	2302      	movs	r3, #2
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	2201      	movs	r2, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	420b      	tst	r3, r1
 80017ce:	d004      	beq.n	80017da <HAL_RCC_OscConfig+0x206>
 80017d0:	6923      	ldr	r3, [r4, #16]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
 80017d8:	e203      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017da:	4839      	ldr	r0, [pc, #228]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 80017dc:	6803      	ldr	r3, [r0, #0]
 80017de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017e2:	6961      	ldr	r1, [r4, #20]
 80017e4:	22f8      	movs	r2, #248	; 0xf8
 80017e6:	fa92 f2a2 	rbit	r2, r2
 80017ea:	fab2 f282 	clz	r2, r2
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	4313      	orrs	r3, r2
 80017f4:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	f013 0f08 	tst.w	r3, #8
 80017fc:	f000 808c 	beq.w	8001918 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001800:	69a3      	ldr	r3, [r4, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d060      	beq.n	80018c8 <HAL_RCC_OscConfig+0x2f4>
 8001806:	2101      	movs	r1, #1
 8001808:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <HAL_RCC_OscConfig+0x2f0>)
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff f8e6 	bl	80009e8 <HAL_GetTick>
 800181c:	4605      	mov	r5, r0
 800181e:	2302      	movs	r3, #2
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	fa93 f2a3 	rbit	r2, r3
 8001828:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182c:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 800182e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2201      	movs	r2, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	420b      	tst	r3, r1
 8001844:	d168      	bne.n	8001918 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff f8cf 	bl	80009e8 <HAL_GetTick>
 800184a:	1b40      	subs	r0, r0, r5
 800184c:	2802      	cmp	r0, #2
 800184e:	d9e6      	bls.n	800181e <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 8001850:	2003      	movs	r0, #3
 8001852:	e1c6      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	481a      	ldr	r0, [pc, #104]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 8001856:	6803      	ldr	r3, [r0, #0]
 8001858:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800185c:	6961      	ldr	r1, [r4, #20]
 800185e:	22f8      	movs	r2, #248	; 0xf8
 8001860:	fa92 f2a2 	rbit	r2, r2
 8001864:	fab2 f282 	clz	r2, r2
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	4313      	orrs	r3, r2
 800186e:	6003      	str	r3, [r0, #0]
 8001870:	e7c1      	b.n	80017f6 <HAL_RCC_OscConfig+0x222>
 8001872:	2301      	movs	r3, #1
 8001874:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001880:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800188a:	f7ff f8ad 	bl	80009e8 <HAL_GetTick>
 800188e:	4605      	mov	r5, r0
 8001890:	2302      	movs	r3, #2
 8001892:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_RCC_OscConfig+0x2ec>)
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	2302      	movs	r3, #2
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	2201      	movs	r2, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	420b      	tst	r3, r1
 80018b0:	d0a1      	beq.n	80017f6 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff f899 	bl	80009e8 <HAL_GetTick>
 80018b6:	1b40      	subs	r0, r0, r5
 80018b8:	2802      	cmp	r0, #2
 80018ba:	d9e9      	bls.n	8001890 <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 80018bc:	2003      	movs	r0, #3
 80018be:	e190      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
 80018c0:	40021000 	.word	0x40021000
 80018c4:	10908120 	.word	0x10908120
 80018c8:	2201      	movs	r2, #1
 80018ca:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	fab2 f282 	clz	r2, r2
 80018d2:	4bc0      	ldr	r3, [pc, #768]	; (8001bd4 <HAL_RCC_OscConfig+0x600>)
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff f884 	bl	80009e8 <HAL_GetTick>
 80018e0:	4605      	mov	r5, r0
 80018e2:	2302      	movs	r3, #2
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	fa93 f2a3 	rbit	r2, r3
 80018ec:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	4ab9      	ldr	r2, [pc, #740]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 80018f2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2201      	movs	r2, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	420b      	tst	r3, r1
 8001908:	d006      	beq.n	8001918 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190a:	f7ff f86d 	bl	80009e8 <HAL_GetTick>
 800190e:	1b40      	subs	r0, r0, r5
 8001910:	2802      	cmp	r0, #2
 8001912:	d9e6      	bls.n	80018e2 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8001914:	2003      	movs	r0, #3
 8001916:	e164      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	f013 0f04 	tst.w	r3, #4
 800191e:	f000 80b3 	beq.w	8001a88 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001922:	4bad      	ldr	r3, [pc, #692]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800192a:	d120      	bne.n	800196e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4baa      	ldr	r3, [pc, #680]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001934:	61da      	str	r2, [r3, #28]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001940:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4ba6      	ldr	r3, [pc, #664]	; (8001bdc <HAL_RCC_OscConfig+0x608>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f413 7f80 	tst.w	r3, #256	; 0x100
 800194a:	d012      	beq.n	8001972 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194c:	68e3      	ldr	r3, [r4, #12]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d023      	beq.n	800199a <HAL_RCC_OscConfig+0x3c6>
 8001952:	bb73      	cbnz	r3, 80019b2 <HAL_RCC_OscConfig+0x3de>
 8001954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001958:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	6a1a      	ldr	r2, [r3, #32]
 8001966:	f022 0204 	bic.w	r2, r2, #4
 800196a:	621a      	str	r2, [r3, #32]
 800196c:	e01a      	b.n	80019a4 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 800196e:	2500      	movs	r5, #0
 8001970:	e7e7      	b.n	8001942 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4a9a      	ldr	r2, [pc, #616]	; (8001bdc <HAL_RCC_OscConfig+0x608>)
 8001974:	6813      	ldr	r3, [r2, #0]
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800197c:	f7ff f834 	bl	80009e8 <HAL_GetTick>
 8001980:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	4b96      	ldr	r3, [pc, #600]	; (8001bdc <HAL_RCC_OscConfig+0x608>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f413 7f80 	tst.w	r3, #256	; 0x100
 800198a:	d1df      	bne.n	800194c <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198c:	f7ff f82c 	bl	80009e8 <HAL_GetTick>
 8001990:	1b80      	subs	r0, r0, r6
 8001992:	2864      	cmp	r0, #100	; 0x64
 8001994:	d9f5      	bls.n	8001982 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8001996:	2003      	movs	r0, #3
 8001998:	e123      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199a:	4a8f      	ldr	r2, [pc, #572]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 800199c:	6a13      	ldr	r3, [r2, #32]
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a4:	68e3      	ldr	r3, [r4, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d041      	beq.n	8001a2e <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7ff f81d 	bl	80009e8 <HAL_GetTick>
 80019ae:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	e02b      	b.n	8001a0a <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_OscConfig+0x3f6>
 80019b6:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 80019b8:	6a1a      	ldr	r2, [r3, #32]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	621a      	str	r2, [r3, #32]
 80019c0:	6a1a      	ldr	r2, [r3, #32]
 80019c2:	f022 0204 	bic.w	r2, r2, #4
 80019c6:	621a      	str	r2, [r3, #32]
 80019c8:	e7ec      	b.n	80019a4 <HAL_RCC_OscConfig+0x3d0>
 80019ca:	4b83      	ldr	r3, [pc, #524]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 80019cc:	6a1a      	ldr	r2, [r3, #32]
 80019ce:	f042 0204 	orr.w	r2, r2, #4
 80019d2:	621a      	str	r2, [r3, #32]
 80019d4:	6a1a      	ldr	r2, [r3, #32]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	621a      	str	r2, [r3, #32]
 80019dc:	e7e2      	b.n	80019a4 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019de:	4b7e      	ldr	r3, [pc, #504]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 80019e0:	6a19      	ldr	r1, [r3, #32]
 80019e2:	2302      	movs	r3, #2
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	2201      	movs	r2, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	4219      	tst	r1, r3
 80019f8:	d145      	bne.n	8001a86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7fe fff5 	bl	80009e8 <HAL_GetTick>
 80019fe:	1b80      	subs	r0, r0, r6
 8001a00:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a04:	4298      	cmp	r0, r3
 8001a06:	f200 80e1 	bhi.w	8001bcc <HAL_RCC_OscConfig+0x5f8>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	fa93 f2a3 	rbit	r2, r3
 8001a10:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	095b      	lsrs	r3, r3, #5
 8001a1a:	f043 0302 	orr.w	r3, r3, #2
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d0dd      	beq.n	80019de <HAL_RCC_OscConfig+0x40a>
 8001a22:	2302      	movs	r3, #2
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	4b6b      	ldr	r3, [pc, #428]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 8001a2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a2c:	e7d9      	b.n	80019e2 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7fe ffdb 	bl	80009e8 <HAL_GetTick>
 8001a32:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x48e>
 8001a36:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 8001a38:	6a19      	ldr	r1, [r3, #32]
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2201      	movs	r2, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	4219      	tst	r1, r3
 8001a50:	d019      	beq.n	8001a86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7fe ffc9 	bl	80009e8 <HAL_GetTick>
 8001a56:	1b80      	subs	r0, r0, r6
 8001a58:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a5c:	4298      	cmp	r0, r3
 8001a5e:	f200 80b7 	bhi.w	8001bd0 <HAL_RCC_OscConfig+0x5fc>
 8001a62:	2302      	movs	r3, #2
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d0dd      	beq.n	8001a36 <HAL_RCC_OscConfig+0x462>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	4b55      	ldr	r3, [pc, #340]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 8001a82:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a84:	e7d9      	b.n	8001a3a <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a86:	bbb5      	cbnz	r5, 8001af6 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a88:	69e3      	ldr	r3, [r4, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80a8 	beq.w	8001be0 <HAL_RCC_OscConfig+0x60c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a90:	4a51      	ldr	r2, [pc, #324]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 8001a92:	6852      	ldr	r2, [r2, #4]
 8001a94:	f002 020c 	and.w	r2, r2, #12
 8001a98:	2a08      	cmp	r2, #8
 8001a9a:	f000 80a4 	beq.w	8001be6 <HAL_RCC_OscConfig+0x612>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d02f      	beq.n	8001b02 <HAL_RCC_OscConfig+0x52e>
 8001aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aa6:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ab2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7fe ff94 	bl	80009e8 <HAL_GetTick>
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aca:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 8001acc:	6819      	ldr	r1, [r3, #0]
 8001ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2201      	movs	r2, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	4219      	tst	r1, r3
 8001ae6:	d06b      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7fe ff7e 	bl	80009e8 <HAL_GetTick>
 8001aec:	1b00      	subs	r0, r0, r4
 8001aee:	2802      	cmp	r0, #2
 8001af0:	d9e7      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 8001af2:	2003      	movs	r0, #3
 8001af4:	e075      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af6:	4a38      	ldr	r2, [pc, #224]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 8001af8:	69d3      	ldr	r3, [r2, #28]
 8001afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afe:	61d3      	str	r3, [r2, #28]
 8001b00:	e7c2      	b.n	8001a88 <HAL_RCC_OscConfig+0x4b4>
 8001b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b06:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b1c:	f7fe ff64 	bl	80009e8 <HAL_GetTick>
 8001b20:	4605      	mov	r5, r0
 8001b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b26:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	2201      	movs	r2, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	4219      	tst	r1, r3
 8001b46:	d006      	beq.n	8001b56 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7fe ff4e 	bl	80009e8 <HAL_GetTick>
 8001b4c:	1b40      	subs	r0, r0, r5
 8001b4e:	2802      	cmp	r0, #2
 8001b50:	d9e7      	bls.n	8001b22 <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 8001b52:	2003      	movs	r0, #3
 8001b54:	e045      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b56:	4920      	ldr	r1, [pc, #128]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 8001b58:	684b      	ldr	r3, [r1, #4]
 8001b5a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001b5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b60:	6a20      	ldr	r0, [r4, #32]
 8001b62:	4302      	orrs	r2, r0
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
 8001b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b6c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b82:	f7fe ff31 	bl	80009e8 <HAL_GetTick>
 8001b86:	4604      	mov	r4, r0
 8001b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_OscConfig+0x604>)
 8001b92:	6819      	ldr	r1, [r3, #0]
 8001b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	4219      	tst	r1, r3
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bae:	f7fe ff1b 	bl	80009e8 <HAL_GetTick>
 8001bb2:	1b00      	subs	r0, r0, r4
 8001bb4:	2802      	cmp	r0, #2
 8001bb6:	d9e7      	bls.n	8001b88 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 8001bb8:	2003      	movs	r0, #3
 8001bba:	e012      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	e010      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	e00e      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
    return HAL_ERROR;
 8001bc4:	2001      	movs	r0, #1
}
 8001bc6:	4770      	bx	lr
        return HAL_ERROR;
 8001bc8:	2001      	movs	r0, #1
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
          return HAL_TIMEOUT;
 8001bcc:	2003      	movs	r0, #3
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
          return HAL_TIMEOUT;
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	e006      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
 8001bd4:	10908120 	.word	0x10908120
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40007000 	.word	0x40007000
  return HAL_OK;
 8001be0:	2000      	movs	r0, #0
}
 8001be2:	b002      	add	sp, #8
 8001be4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001be6:	2001      	movs	r0, #1
 8001be8:	e7fb      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
 8001bea:	bf00      	nop

08001bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b410      	push	{r4}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x60>)
 8001bf0:	685c      	ldr	r4, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bf2:	f004 030c 	and.w	r3, r4, #12
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d126      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001bfa:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8001bfe:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0e:	4910      	ldr	r1, [pc, #64]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x64>)
 8001c10:	5cc8      	ldrb	r0, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x60>)
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa92 f2a2 	rbit	r2, r2
 8001c20:	fab2 f282 	clz	r2, r2
 8001c24:	40d3      	lsrs	r3, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	7c1a      	ldrb	r2, [r3, #16]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c2a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001c2e:	d105      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0x50>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x68>)
 8001c32:	fb03 f000 	mul.w	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c3a:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c42:	fb00 f003 	mul.w	r0, r0, r3
 8001c46:	e7f6      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x4a>
      sysclockfreq = HSE_VALUE;
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001c4a:	e7f4      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x4a>
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08002b7c 	.word	0x08002b7c
 8001c54:	003d0900 	.word	0x003d0900
 8001c58:	007a1200 	.word	0x007a1200

08001c5c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	f000 80c0 	beq.w	8001de2 <HAL_RCC_ClockConfig+0x186>
{
 8001c62:	b570      	push	{r4, r5, r6, lr}
 8001c64:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c66:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCC_ClockConfig+0x190>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	428b      	cmp	r3, r1
 8001c70:	d20c      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4a5e      	ldr	r2, [pc, #376]	; (8001dec <HAL_RCC_ClockConfig+0x190>)
 8001c74:	6813      	ldr	r3, [r2, #0]
 8001c76:	f023 0307 	bic.w	r3, r3, #7
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	6813      	ldr	r3, [r2, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	428b      	cmp	r3, r1
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001c88:	2001      	movs	r0, #1
}
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	f013 0f02 	tst.w	r3, #2
 8001c92:	d006      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c94:	4a56      	ldr	r2, [pc, #344]	; (8001df0 <HAL_RCC_ClockConfig+0x194>)
 8001c96:	6853      	ldr	r3, [r2, #4]
 8001c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c9c:	68a0      	ldr	r0, [r4, #8]
 8001c9e:	4303      	orrs	r3, r0
 8001ca0:	6053      	str	r3, [r2, #4]
 8001ca2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	f013 0f01 	tst.w	r3, #1
 8001caa:	d05a      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cac:	6863      	ldr	r3, [r4, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d02d      	beq.n	8001d0e <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d040      	beq.n	8001d38 <HAL_RCC_ClockConfig+0xdc>
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4a4c      	ldr	r2, [pc, #304]	; (8001df0 <HAL_RCC_ClockConfig+0x194>)
 8001cbe:	6810      	ldr	r0, [r2, #0]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	fa92 f2a2 	rbit	r2, r2
 8001cc6:	fab2 f282 	clz	r2, r2
 8001cca:	f002 021f 	and.w	r2, r2, #31
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	4210      	tst	r0, r2
 8001cd6:	f000 8086 	beq.w	8001de6 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4945      	ldr	r1, [pc, #276]	; (8001df0 <HAL_RCC_ClockConfig+0x194>)
 8001cdc:	684a      	ldr	r2, [r1, #4]
 8001cde:	f022 0203 	bic.w	r2, r2, #3
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001ce6:	f7fe fe7f 	bl	80009e8 <HAL_GetTick>
 8001cea:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cec:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <HAL_RCC_ClockConfig+0x194>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	6862      	ldr	r2, [r4, #4]
 8001cf6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cfa:	d032      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7fe fe74 	bl	80009e8 <HAL_GetTick>
 8001d00:	1b80      	subs	r0, r0, r6
 8001d02:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d06:	4298      	cmp	r0, r3
 8001d08:	d9f0      	bls.n	8001cec <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	e7bd      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2e>
 8001d0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d12:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4a36      	ldr	r2, [pc, #216]	; (8001df0 <HAL_RCC_ClockConfig+0x194>)
 8001d18:	6810      	ldr	r0, [r2, #0]
 8001d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d1e:	fa92 f2a2 	rbit	r2, r2
 8001d22:	fab2 f282 	clz	r2, r2
 8001d26:	f002 021f 	and.w	r2, r2, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d30:	4202      	tst	r2, r0
 8001d32:	d1d2      	bne.n	8001cda <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8001d34:	2001      	movs	r0, #1
 8001d36:	e7a8      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2e>
 8001d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d40:	4a2b      	ldr	r2, [pc, #172]	; (8001df0 <HAL_RCC_ClockConfig+0x194>)
 8001d42:	6810      	ldr	r0, [r2, #0]
 8001d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d48:	fa92 f2a2 	rbit	r2, r2
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	f002 021f 	and.w	r2, r2, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	4210      	tst	r0, r2
 8001d5c:	d1bd      	bne.n	8001cda <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8001d5e:	2001      	movs	r0, #1
 8001d60:	e793      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_RCC_ClockConfig+0x190>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	42ab      	cmp	r3, r5
 8001d6c:	d90c      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <HAL_RCC_ClockConfig+0x190>)
 8001d70:	6813      	ldr	r3, [r2, #0]
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	432b      	orrs	r3, r5
 8001d78:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	6813      	ldr	r3, [r2, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	42ab      	cmp	r3, r5
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
 8001d86:	e780      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	f013 0f04 	tst.w	r3, #4
 8001d8e:	d006      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_RCC_ClockConfig+0x194>)
 8001d92:	6853      	ldr	r3, [r2, #4]
 8001d94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d98:	68e1      	ldr	r1, [r4, #12]
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	f013 0f08 	tst.w	r3, #8
 8001da4:	d007      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x194>)
 8001da8:	6853      	ldr	r3, [r2, #4]
 8001daa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001dae:	6921      	ldr	r1, [r4, #16]
 8001db0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001db4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001db6:	f7ff ff19 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_RCC_ClockConfig+0x194>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc2:	22f0      	movs	r2, #240	; 0xf0
 8001dc4:	fa92 f2a2 	rbit	r2, r2
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	40d3      	lsrs	r3, r2
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_RCC_ClockConfig+0x198>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	40d8      	lsrs	r0, r3
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_RCC_ClockConfig+0x19c>)
 8001dd6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7fe fdc3 	bl	8000964 <HAL_InitTick>
  return HAL_OK;
 8001dde:	2000      	movs	r0, #0
 8001de0:	e753      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001de2:	2001      	movs	r0, #1
}
 8001de4:	4770      	bx	lr
        return HAL_ERROR;
 8001de6:	2001      	movs	r0, #1
 8001de8:	e74f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2e>
 8001dea:	bf00      	nop
 8001dec:	40022000 	.word	0x40022000
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08002b9c 	.word	0x08002b9c
 8001df8:	20000008 	.word	0x20000008

08001dfc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001dfc:	4b01      	ldr	r3, [pc, #4]	; (8001e04 <HAL_RCC_GetHCLKFreq+0x8>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000008 	.word	0x20000008

08001e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e0e:	6803      	ldr	r3, [r0, #0]
 8001e10:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e14:	d048      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e16:	4b93      	ldr	r3, [pc, #588]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e1e:	f040 80d5 	bne.w	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b90      	ldr	r3, [pc, #576]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e2a:	61da      	str	r2, [r3, #28]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e36:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	4b8b      	ldr	r3, [pc, #556]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e40:	f000 80c6 	beq.w	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e44:	4b87      	ldr	r3, [pc, #540]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e48:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001e4c:	d022      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8001e4e:	6862      	ldr	r2, [r4, #4]
 8001e50:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d01d      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e58:	4882      	ldr	r0, [pc, #520]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e5a:	6a01      	ldr	r1, [r0, #32]
 8001e5c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e64:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e68:	fab2 f282 	clz	r2, r2
 8001e6c:	4f7f      	ldr	r7, [pc, #508]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e6e:	443a      	add	r2, r7
 8001e70:	0092      	lsls	r2, r2, #2
 8001e72:	f04f 0c01 	mov.w	ip, #1
 8001e76:	f8c2 c000 	str.w	ip, [r2]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	443b      	add	r3, r7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e8a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e8c:	f011 0f01 	tst.w	r1, #1
 8001e90:	f040 80b3 	bne.w	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001e94:	4a73      	ldr	r2, [pc, #460]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e96:	6a13      	ldr	r3, [r2, #32]
 8001e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9c:	6861      	ldr	r1, [r4, #4]
 8001e9e:	430b      	orrs	r3, r1
 8001ea0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ea2:	2d00      	cmp	r5, #0
 8001ea4:	f040 80d5 	bne.w	8002052 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	f013 0f01 	tst.w	r3, #1
 8001eae:	d006      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eb0:	4a6c      	ldr	r2, [pc, #432]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001eb4:	f023 0303 	bic.w	r3, r3, #3
 8001eb8:	68a1      	ldr	r1, [r4, #8]
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	f013 0f02 	tst.w	r3, #2
 8001ec4:	d006      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ec6:	4a67      	ldr	r2, [pc, #412]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ec8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001eca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ece:	68e1      	ldr	r1, [r4, #12]
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	f013 0f04 	tst.w	r3, #4
 8001eda:	d006      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001edc:	4a61      	ldr	r2, [pc, #388]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ede:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ee0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001ee4:	6921      	ldr	r1, [r4, #16]
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	f013 0f20 	tst.w	r3, #32
 8001ef0:	d006      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ef2:	4a5c      	ldr	r2, [pc, #368]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ef4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ef6:	f023 0310 	bic.w	r3, r3, #16
 8001efa:	69e1      	ldr	r1, [r4, #28]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f06:	d006      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001f08:	4a56      	ldr	r2, [pc, #344]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f0a:	6853      	ldr	r3, [r2, #4]
 8001f0c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001f12:	430b      	orrs	r3, r1
 8001f14:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f1c:	d006      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f1e:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f22:	f023 0320 	bic.w	r3, r3, #32
 8001f26:	6a21      	ldr	r1, [r4, #32]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	f013 0f08 	tst.w	r3, #8
 8001f32:	d006      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f34:	4a4b      	ldr	r2, [pc, #300]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f36:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f3c:	6961      	ldr	r1, [r4, #20]
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	f013 0f10 	tst.w	r3, #16
 8001f48:	d006      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f4a:	4a46      	ldr	r2, [pc, #280]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f4e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f52:	69a1      	ldr	r1, [r4, #24]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001f5e:	d006      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f60:	4a40      	ldr	r2, [pc, #256]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f62:	6853      	ldr	r3, [r2, #4]
 8001f64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f74:	d006      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f76:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f7a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001f7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f80:	430b      	orrs	r3, r1
 8001f82:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f8a:	d006      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001f8c:	4a35      	ldr	r2, [pc, #212]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f8e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f90:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001f94:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f96:	430b      	orrs	r3, r1
 8001f98:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001fa0:	d006      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fa2:	4a30      	ldr	r2, [pc, #192]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001fa4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001faa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001fac:	430b      	orrs	r3, r1
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001fb6:	d053      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001fba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001fc6:	2000      	movs	r0, #0
}
 8001fc8:	b003      	add	sp, #12
 8001fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001fcc:	2500      	movs	r5, #0
 8001fce:	e733      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd0:	4a25      	ldr	r2, [pc, #148]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001fda:	f7fe fd05 	bl	80009e8 <HAL_GetTick>
 8001fde:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fe8:	f47f af2c 	bne.w	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fec:	f7fe fcfc 	bl	80009e8 <HAL_GetTick>
 8001ff0:	1b80      	subs	r0, r0, r6
 8001ff2:	2864      	cmp	r0, #100	; 0x64
 8001ff4:	d9f4      	bls.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          return HAL_TIMEOUT;
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	e7e6      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fcf5 	bl	80009e8 <HAL_GetTick>
 8001ffe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	e015      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x226>
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002004:	6a19      	ldr	r1, [r3, #32]
 8002006:	2302      	movs	r3, #2
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2201      	movs	r2, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	420b      	tst	r3, r1
 800201c:	f47f af3a 	bne.w	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7fe fce2 	bl	80009e8 <HAL_GetTick>
 8002024:	1b80      	subs	r0, r0, r6
 8002026:	f241 3388 	movw	r3, #5000	; 0x1388
 800202a:	4298      	cmp	r0, r3
 800202c:	d816      	bhi.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800202e:	2302      	movs	r3, #2
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	f043 0302 	orr.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d0dd      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002046:	2302      	movs	r3, #2
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800204e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002050:	e7d9      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002052:	69d3      	ldr	r3, [r2, #28]
 8002054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	e725      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 800205c:	2003      	movs	r0, #3
 800205e:	e7b3      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  return HAL_OK;
 8002060:	2000      	movs	r0, #0
 8002062:	e7b1      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002064:	40021000 	.word	0x40021000
 8002068:	40007000 	.word	0x40007000
 800206c:	10908100 	.word	0x10908100

08002070 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002070:	6802      	ldr	r2, [r0, #0]
 8002072:	68d3      	ldr	r3, [r2, #12]
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	60d3      	str	r3, [r2, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800207a:	6802      	ldr	r2, [r0, #0]
 800207c:	6813      	ldr	r3, [r2, #0]
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002084:	2000      	movs	r0, #0
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_PeriodElapsedCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 8002088:	4770      	bx	lr

0800208a <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800208a:	4770      	bx	lr

0800208c <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800208c:	4770      	bx	lr

0800208e <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800208e:	4770      	bx	lr

08002090 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002090:	4770      	bx	lr

08002092 <HAL_TIM_IRQHandler>:
{
 8002092:	b510      	push	{r4, lr}
 8002094:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002096:	6803      	ldr	r3, [r0, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	f012 0f02 	tst.w	r2, #2
 800209e:	d011      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	f012 0f02 	tst.w	r2, #2
 80020a6:	d00d      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020a8:	f06f 0202 	mvn.w	r2, #2
 80020ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ae:	2301      	movs	r3, #1
 80020b0:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b2:	6803      	ldr	r3, [r0, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f013 0f03 	tst.w	r3, #3
 80020ba:	d079      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80020bc:	f7ff ffe6 	bl	800208c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c0:	2300      	movs	r3, #0
 80020c2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	f012 0f04 	tst.w	r2, #4
 80020cc:	d012      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	f012 0f04 	tst.w	r2, #4
 80020d4:	d00e      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020d6:	f06f 0204 	mvn.w	r2, #4
 80020da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020dc:	2302      	movs	r3, #2
 80020de:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80020e8:	d068      	beq.n	80021bc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff ffce 	bl	800208c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f0:	2300      	movs	r3, #0
 80020f2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	f012 0f08 	tst.w	r2, #8
 80020fc:	d012      	beq.n	8002124 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	f012 0f08 	tst.w	r2, #8
 8002104:	d00e      	beq.n	8002124 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002106:	f06f 0208 	mvn.w	r2, #8
 800210a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800210c:	2304      	movs	r3, #4
 800210e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f013 0f03 	tst.w	r3, #3
 8002118:	d057      	beq.n	80021ca <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff ffb6 	bl	800208c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002120:	2300      	movs	r3, #0
 8002122:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	f012 0f10 	tst.w	r2, #16
 800212c:	d012      	beq.n	8002154 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	f012 0f10 	tst.w	r2, #16
 8002134:	d00e      	beq.n	8002154 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002136:	f06f 0210 	mvn.w	r2, #16
 800213a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213c:	2308      	movs	r3, #8
 800213e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002148:	d046      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800214a:	4620      	mov	r0, r4
 800214c:	f7ff ff9e 	bl	800208c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002150:	2300      	movs	r3, #0
 8002152:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	f012 0f01 	tst.w	r2, #1
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	f012 0f01 	tst.w	r2, #1
 8002164:	d13f      	bne.n	80021e6 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800216e:	d003      	beq.n	8002178 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002176:	d13d      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002180:	d003      	beq.n	800218a <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002188:	d13b      	bne.n	8002202 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002192:	d003      	beq.n	800219c <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	f012 0f40 	tst.w	r2, #64	; 0x40
 800219a:	d139      	bne.n	8002210 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	f012 0f20 	tst.w	r2, #32
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	f012 0f20 	tst.w	r2, #32
 80021ac:	d137      	bne.n	800221e <HAL_TIM_IRQHandler+0x18c>
}
 80021ae:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b0:	f7ff ff6b 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7ff ff6a 	bl	800208e <HAL_TIM_PWM_PulseFinishedCallback>
 80021ba:	e781      	b.n	80020c0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff ff64 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff ff63 	bl	800208e <HAL_TIM_PWM_PulseFinishedCallback>
 80021c8:	e792      	b.n	80020f0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ff5d 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff ff5c 	bl	800208e <HAL_TIM_PWM_PulseFinishedCallback>
 80021d6:	e7a3      	b.n	8002120 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff ff56 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021de:	4620      	mov	r0, r4
 80021e0:	f7ff ff55 	bl	800208e <HAL_TIM_PWM_PulseFinishedCallback>
 80021e4:	e7b4      	b.n	8002150 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021e6:	f06f 0201 	mvn.w	r2, #1
 80021ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ec:	4620      	mov	r0, r4
 80021ee:	f7ff ff4b 	bl	8002088 <HAL_TIM_PeriodElapsedCallback>
 80021f2:	e7b8      	b.n	8002166 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021fa:	4620      	mov	r0, r4
 80021fc:	f000 f8b9 	bl	8002372 <HAL_TIMEx_BreakCallback>
 8002200:	e7ba      	b.n	8002178 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002202:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002206:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002208:	4620      	mov	r0, r4
 800220a:	f000 f8b3 	bl	8002374 <HAL_TIMEx_Break2Callback>
 800220e:	e7bc      	b.n	800218a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002210:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002214:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002216:	4620      	mov	r0, r4
 8002218:	f7ff ff3a 	bl	8002090 <HAL_TIM_TriggerCallback>
 800221c:	e7be      	b.n	800219c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800221e:	f06f 0220 	mvn.w	r2, #32
 8002222:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002224:	4620      	mov	r0, r4
 8002226:	f000 f8a3 	bl	8002370 <HAL_TIMEx_CommutationCallback>
}
 800222a:	e7c0      	b.n	80021ae <HAL_TIM_IRQHandler+0x11c>

0800222c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800222c:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222e:	4a2c      	ldr	r2, [pc, #176]	; (80022e0 <TIM_Base_SetConfig+0xb4>)
 8002230:	4290      	cmp	r0, r2
 8002232:	d00e      	beq.n	8002252 <TIM_Base_SetConfig+0x26>
 8002234:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002238:	d00b      	beq.n	8002252 <TIM_Base_SetConfig+0x26>
 800223a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800223e:	4290      	cmp	r0, r2
 8002240:	d007      	beq.n	8002252 <TIM_Base_SetConfig+0x26>
 8002242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002246:	4290      	cmp	r0, r2
 8002248:	d003      	beq.n	8002252 <TIM_Base_SetConfig+0x26>
 800224a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800224e:	4290      	cmp	r0, r2
 8002250:	d103      	bne.n	800225a <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002256:	684a      	ldr	r2, [r1, #4]
 8002258:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <TIM_Base_SetConfig+0xb4>)
 800225c:	4290      	cmp	r0, r2
 800225e:	d01a      	beq.n	8002296 <TIM_Base_SetConfig+0x6a>
 8002260:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002264:	d017      	beq.n	8002296 <TIM_Base_SetConfig+0x6a>
 8002266:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800226a:	4290      	cmp	r0, r2
 800226c:	d013      	beq.n	8002296 <TIM_Base_SetConfig+0x6a>
 800226e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002272:	4290      	cmp	r0, r2
 8002274:	d00f      	beq.n	8002296 <TIM_Base_SetConfig+0x6a>
 8002276:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800227a:	4290      	cmp	r0, r2
 800227c:	d00b      	beq.n	8002296 <TIM_Base_SetConfig+0x6a>
 800227e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002282:	4290      	cmp	r0, r2
 8002284:	d007      	beq.n	8002296 <TIM_Base_SetConfig+0x6a>
 8002286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800228a:	4290      	cmp	r0, r2
 800228c:	d003      	beq.n	8002296 <TIM_Base_SetConfig+0x6a>
 800228e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002292:	4290      	cmp	r0, r2
 8002294:	d103      	bne.n	800229e <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229a:	68ca      	ldr	r2, [r1, #12]
 800229c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800229e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a2:	694a      	ldr	r2, [r1, #20]
 80022a4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80022a6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a8:	688b      	ldr	r3, [r1, #8]
 80022aa:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80022ac:	680b      	ldr	r3, [r1, #0]
 80022ae:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <TIM_Base_SetConfig+0xb4>)
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d00f      	beq.n	80022d6 <TIM_Base_SetConfig+0xaa>
 80022b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ba:	4298      	cmp	r0, r3
 80022bc:	d00b      	beq.n	80022d6 <TIM_Base_SetConfig+0xaa>
 80022be:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d007      	beq.n	80022d6 <TIM_Base_SetConfig+0xaa>
 80022c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ca:	4298      	cmp	r0, r3
 80022cc:	d003      	beq.n	80022d6 <TIM_Base_SetConfig+0xaa>
 80022ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d2:	4298      	cmp	r0, r3
 80022d4:	d101      	bne.n	80022da <TIM_Base_SetConfig+0xae>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d6:	690b      	ldr	r3, [r1, #16]
 80022d8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80022da:	2301      	movs	r3, #1
 80022dc:	6143      	str	r3, [r0, #20]
}
 80022de:	4770      	bx	lr
 80022e0:	40012c00 	.word	0x40012c00

080022e4 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80022e4:	b1a8      	cbz	r0, 8002312 <HAL_TIM_Base_Init+0x2e>
{ 
 80022e6:	b510      	push	{r4, lr}
 80022e8:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80022ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022ee:	b15b      	cbz	r3, 8002308 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80022f0:	2302      	movs	r3, #2
 80022f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022f6:	1d21      	adds	r1, r4, #4
 80022f8:	6820      	ldr	r0, [r4, #0]
 80022fa:	f7ff ff97 	bl	800222c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022fe:	2301      	movs	r3, #1
 8002300:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002304:	2000      	movs	r0, #0
}
 8002306:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002308:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800230c:	f000 fafc 	bl	8002908 <HAL_TIM_Base_MspInit>
 8002310:	e7ee      	b.n	80022f0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002312:	2001      	movs	r0, #1
}
 8002314:	4770      	bx	lr
	...

08002318 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002318:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800231c:	2b01      	cmp	r3, #1
 800231e:	d022      	beq.n	8002366 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8002320:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002322:	2301      	movs	r3, #1
 8002324:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002328:	6802      	ldr	r2, [r0, #0]
 800232a:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800232c:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800232e:	4c0f      	ldr	r4, [pc, #60]	; (800236c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8002330:	42a2      	cmp	r2, r4
 8002332:	d003      	beq.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0x24>
 8002334:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002338:	42a2      	cmp	r2, r4
 800233a:	d103      	bne.n	8002344 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800233c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002340:	684c      	ldr	r4, [r1, #4]
 8002342:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002348:	680c      	ldr	r4, [r1, #0]
 800234a:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800234c:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002350:	6889      	ldr	r1, [r1, #8]
 8002352:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002354:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002356:	6803      	ldr	r3, [r0, #0]
 8002358:	6099      	str	r1, [r3, #8]

  __HAL_UNLOCK(htim);
 800235a:	2300      	movs	r3, #0
 800235c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002360:	4618      	mov	r0, r3
} 
 8002362:	bc30      	pop	{r4, r5}
 8002364:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002366:	2002      	movs	r0, #2
} 
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00

08002370 <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002370:	4770      	bx	lr

08002372 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002372:	4770      	bx	lr

08002374 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002374:	4770      	bx	lr
	...

08002378 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <MX_GPIO_Init+0xc8>)
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002384:	615a      	str	r2, [r3, #20]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800238c:	9200      	str	r2, [sp, #0]
 800238e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002396:	615a      	str	r2, [r3, #20]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800239e:	9201      	str	r2, [sp, #4]
 80023a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023a8:	615a      	str	r2, [r3, #20]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80023b0:	9202      	str	r2, [sp, #8]
 80023b2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023ba:	615a      	str	r2, [r3, #20]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80023c2:	9203      	str	r2, [sp, #12]
 80023c4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023cc:	615a      	str	r2, [r3, #20]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d4:	9304      	str	r3, [sp, #16]
 80023d6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80023d8:	4f1a      	ldr	r7, [pc, #104]	; (8002444 <MX_GPIO_Init+0xcc>)
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80023e0:	4638      	mov	r0, r7
 80023e2:	f7fe fce7 	bl	8000db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2140      	movs	r1, #64	; 0x40
 80023ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ee:	f7fe fce1 	bl	8000db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80023f2:	4e15      	ldr	r6, [pc, #84]	; (8002448 <MX_GPIO_Init+0xd0>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	2104      	movs	r1, #4
 80023f8:	4630      	mov	r0, r6
 80023fa:	f7fe fcdb 	bl	8000db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002402:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002404:	2501      	movs	r5, #1
 8002406:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2400      	movs	r4, #0
 800240a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240e:	a905      	add	r1, sp, #20
 8002410:	4638      	mov	r0, r7
 8002412:	f7fe fb81 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002416:	2340      	movs	r3, #64	; 0x40
 8002418:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	a905      	add	r1, sp, #20
 8002422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002426:	f7fe fb77 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800242a:	2304      	movs	r3, #4
 800242c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002434:	a905      	add	r1, sp, #20
 8002436:	4630      	mov	r0, r6
 8002438:	f7fe fb6e 	bl	8000b18 <HAL_GPIO_Init>

}
 800243c:	b00b      	add	sp, #44	; 0x2c
 800243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	48000800 	.word	0x48000800
 8002448:	48000c00 	.word	0x48000c00

0800244c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800244c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800244e:	4815      	ldr	r0, [pc, #84]	; (80024a4 <MX_I2C1_Init+0x58>)
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <MX_I2C1_Init+0x5c>)
 8002452:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002454:	4b15      	ldr	r3, [pc, #84]	; (80024ac <MX_I2C1_Init+0x60>)
 8002456:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800245c:	2201      	movs	r2, #1
 800245e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002460:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002462:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002464:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002466:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002468:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800246a:	f7fe fe10 	bl	800108e <HAL_I2C_Init>
 800246e:	b950      	cbnz	r0, 8002486 <MX_I2C1_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002470:	2100      	movs	r1, #0
 8002472:	480c      	ldr	r0, [pc, #48]	; (80024a4 <MX_I2C1_Init+0x58>)
 8002474:	f7ff f854 	bl	8001520 <HAL_I2CEx_ConfigAnalogFilter>
 8002478:	b950      	cbnz	r0, 8002490 <MX_I2C1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800247a:	2100      	movs	r1, #0
 800247c:	4809      	ldr	r0, [pc, #36]	; (80024a4 <MX_I2C1_Init+0x58>)
 800247e:	f7ff f87d 	bl	800157c <HAL_I2CEx_ConfigDigitalFilter>
 8002482:	b950      	cbnz	r0, 800249a <MX_I2C1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002484:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002486:	2143      	movs	r1, #67	; 0x43
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <MX_I2C1_Init+0x64>)
 800248a:	f000 f914 	bl	80026b6 <_Error_Handler>
 800248e:	e7ef      	b.n	8002470 <MX_I2C1_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8002490:	214a      	movs	r1, #74	; 0x4a
 8002492:	4807      	ldr	r0, [pc, #28]	; (80024b0 <MX_I2C1_Init+0x64>)
 8002494:	f000 f90f 	bl	80026b6 <_Error_Handler>
 8002498:	e7ef      	b.n	800247a <MX_I2C1_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 800249a:	2151      	movs	r1, #81	; 0x51
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_I2C1_Init+0x64>)
 800249e:	f000 f90a 	bl	80026b6 <_Error_Handler>
}
 80024a2:	e7ef      	b.n	8002484 <MX_I2C1_Init+0x38>
 80024a4:	2000006c 	.word	0x2000006c
 80024a8:	40005400 	.word	0x40005400
 80024ac:	2000090e 	.word	0x2000090e
 80024b0:	08002bb4 	.word	0x08002bb4

080024b4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80024b4:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80024b6:	4815      	ldr	r0, [pc, #84]	; (800250c <MX_I2C2_Init+0x58>)
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <MX_I2C2_Init+0x5c>)
 80024ba:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <MX_I2C2_Init+0x60>)
 80024be:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024c4:	2201      	movs	r2, #1
 80024c6:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024c8:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024ca:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024cc:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ce:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024d0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024d2:	f7fe fddc 	bl	800108e <HAL_I2C_Init>
 80024d6:	b950      	cbnz	r0, 80024ee <MX_I2C2_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024d8:	2100      	movs	r1, #0
 80024da:	480c      	ldr	r0, [pc, #48]	; (800250c <MX_I2C2_Init+0x58>)
 80024dc:	f7ff f820 	bl	8001520 <HAL_I2CEx_ConfigAnalogFilter>
 80024e0:	b950      	cbnz	r0, 80024f8 <MX_I2C2_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4809      	ldr	r0, [pc, #36]	; (800250c <MX_I2C2_Init+0x58>)
 80024e6:	f7ff f849 	bl	800157c <HAL_I2CEx_ConfigDigitalFilter>
 80024ea:	b950      	cbnz	r0, 8002502 <MX_I2C2_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80024ec:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80024ee:	2164      	movs	r1, #100	; 0x64
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <MX_I2C2_Init+0x64>)
 80024f2:	f000 f8e0 	bl	80026b6 <_Error_Handler>
 80024f6:	e7ef      	b.n	80024d8 <MX_I2C2_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 80024f8:	216b      	movs	r1, #107	; 0x6b
 80024fa:	4807      	ldr	r0, [pc, #28]	; (8002518 <MX_I2C2_Init+0x64>)
 80024fc:	f000 f8db 	bl	80026b6 <_Error_Handler>
 8002500:	e7ef      	b.n	80024e2 <MX_I2C2_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 8002502:	2172      	movs	r1, #114	; 0x72
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_I2C2_Init+0x64>)
 8002506:	f000 f8d6 	bl	80026b6 <_Error_Handler>
}
 800250a:	e7ef      	b.n	80024ec <MX_I2C2_Init+0x38>
 800250c:	200000b8 	.word	0x200000b8
 8002510:	40005800 	.word	0x40005800
 8002514:	2000090e 	.word	0x2000090e
 8002518:	08002bb4 	.word	0x08002bb4

0800251c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002520:	6803      	ldr	r3, [r0, #0]
 8002522:	4a22      	ldr	r2, [pc, #136]	; (80025ac <HAL_I2C_MspInit+0x90>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_I2C_MspInit+0x16>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <HAL_I2C_MspInit+0x94>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d026      	beq.n	800257c <HAL_I2C_MspInit+0x60>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800252e:	b009      	add	sp, #36	; 0x24
 8002530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002536:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002538:	2712      	movs	r7, #18
 800253a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253c:	2601      	movs	r6, #1
 800253e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002540:	2503      	movs	r5, #3
 8002542:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002544:	2404      	movs	r4, #4
 8002546:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	a903      	add	r1, sp, #12
 800254a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254e:	f7fe fae3 	bl	8000b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002556:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002558:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800255a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800255c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255e:	a903      	add	r1, sp, #12
 8002560:	4814      	ldr	r0, [pc, #80]	; (80025b4 <HAL_I2C_MspInit+0x98>)
 8002562:	f7fe fad9 	bl	8000b18 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_I2C_MspInit+0x9c>)
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800256e:	61da      	str	r2, [r3, #28]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	9b01      	ldr	r3, [sp, #4]
 800257a:	e7d8      	b.n	800252e <HAL_I2C_MspInit+0x12>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800257c:	2303      	movs	r3, #3
 800257e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002580:	2212      	movs	r2, #18
 8002582:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002584:	2201      	movs	r2, #1
 8002586:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002588:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800258a:	2304      	movs	r3, #4
 800258c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800258e:	a903      	add	r1, sp, #12
 8002590:	480a      	ldr	r0, [pc, #40]	; (80025bc <HAL_I2C_MspInit+0xa0>)
 8002592:	f7fe fac1 	bl	8000b18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_I2C_MspInit+0x9c>)
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800259e:	61da      	str	r2, [r3, #28]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	9b02      	ldr	r3, [sp, #8]
}
 80025aa:	e7c0      	b.n	800252e <HAL_I2C_MspInit+0x12>
 80025ac:	40005400 	.word	0x40005400
 80025b0:	40005800 	.word	0x40005800
 80025b4:	48000400 	.word	0x48000400
 80025b8:	40021000 	.word	0x40021000
 80025bc:	48001400 	.word	0x48001400

080025c0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80025c0:	b508      	push	{r3, lr}

  if(i2cHandle->Instance==I2C1)
 80025c2:	6803      	ldr	r3, [r0, #0]
 80025c4:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_I2C_MspDeInit+0x4c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <HAL_I2C_MspDeInit+0x12>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 80025ca:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_I2C_MspDeInit+0x50>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d011      	beq.n	80025f4 <HAL_I2C_MspDeInit+0x34>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
} 
 80025d0:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 80025d2:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80025d6:	69d3      	ldr	r3, [r2, #28]
 80025d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025dc:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 80025de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e6:	f7fe fb61 	bl	8000cac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	4809      	ldr	r0, [pc, #36]	; (8002614 <HAL_I2C_MspDeInit+0x54>)
 80025ee:	f7fe fb5d 	bl	8000cac <HAL_GPIO_DeInit>
 80025f2:	e7ed      	b.n	80025d0 <HAL_I2C_MspDeInit+0x10>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80025f4:	f502 32dc 	add.w	r2, r2, #112640	; 0x1b800
 80025f8:	69d3      	ldr	r3, [r2, #28]
 80025fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80025fe:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0|GPIO_PIN_1);
 8002600:	2103      	movs	r1, #3
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <HAL_I2C_MspDeInit+0x58>)
 8002604:	f7fe fb52 	bl	8000cac <HAL_GPIO_DeInit>
} 
 8002608:	e7e2      	b.n	80025d0 <HAL_I2C_MspDeInit+0x10>
 800260a:	bf00      	nop
 800260c:	40005400 	.word	0x40005400
 8002610:	40005800 	.word	0x40005800
 8002614:	48000400 	.word	0x48000400
 8002618:	48001400 	.word	0x48001400

0800261c <_ZN11I2C_myclassC1EP19__I2C_HandleTypeDefh>:
 *      Author: conat
 */
#include "i2c_myclass.hpp"

I2C_myclass::I2C_myclass(I2C_HandleTypeDef *hi2c , uint8_t Myaddress){
	i2c = hi2c;
 800261c:	6081      	str	r1, [r0, #8]
	timeout = 100;
 800261e:	2164      	movs	r1, #100	; 0x64
 8002620:	6041      	str	r1, [r0, #4]
	myaddress = Myaddress;
 8002622:	7002      	strb	r2, [r0, #0]

}
 8002624:	4770      	bx	lr

08002626 <_ZN11I2C_myclass4initEv>:

uint8_t I2C_myclass::init(){
	if(myaddress >= 0b10000000 )
 8002626:	f990 3000 	ldrsb.w	r3, [r0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	db0d      	blt.n	800264a <_ZN11I2C_myclass4initEv+0x24>
uint8_t I2C_myclass::init(){
 800262e:	b510      	push	{r4, lr}
 8002630:	4604      	mov	r4, r0
		return 1;
	HAL_I2C_DeInit(i2c);
 8002632:	6880      	ldr	r0, [r0, #8]
 8002634:	f7fe fd89 	bl	800114a <HAL_I2C_DeInit>
	i2c->Init.OwnAddress1 = myaddress << 1;
 8002638:	7823      	ldrb	r3, [r4, #0]
 800263a:	68a2      	ldr	r2, [r4, #8]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	6093      	str	r3, [r2, #8]
	HAL_I2C_Init(i2c);
 8002640:	68a0      	ldr	r0, [r4, #8]
 8002642:	f7fe fd24 	bl	800108e <HAL_I2C_Init>

	return 0;
 8002646:	2000      	movs	r0, #0
}
 8002648:	bd10      	pop	{r4, pc}
		return 1;
 800264a:	2001      	movs	r0, #1
}
 800264c:	4770      	bx	lr

0800264e <_ZN11I2C_myclass8mem_readEPhhtth>:
	if(HAL_OK == HAL_I2C_Master_Receive(i2c , target_address << 1 , pdata , data_size , 0xff))
		return 0;
	return 1;
}

uint8_t I2C_myclass::mem_read(uint8_t *pdata , uint8_t data_size , uint16_t memAddress , uint16_t memAddress_size , uint8_t target_address){
 800264e:	b570      	push	{r4, r5, r6, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
	if(target_address >= 0b10000000 )
 8002656:	f016 0f80 	tst.w	r6, #128	; 0x80
 800265a:	d10f      	bne.n	800267c <_ZN11I2C_myclass8mem_readEPhhtth+0x2e>
 800265c:	461d      	mov	r5, r3
 800265e:	4604      	mov	r4, r0
		return 1;
	if(HAL_OK == HAL_I2C_Mem_Read(i2c , target_address << 1, memAddress , memAddress_size , pdata , data_size , timeout))
 8002660:	6880      	ldr	r0, [r0, #8]
 8002662:	6863      	ldr	r3, [r4, #4]
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	9201      	str	r2, [sp, #4]
 8002668:	9100      	str	r1, [sp, #0]
 800266a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800266e:	462a      	mov	r2, r5
 8002670:	0071      	lsls	r1, r6, #1
 8002672:	f7fe fe6d 	bl	8001350 <HAL_I2C_Mem_Read>
 8002676:	b110      	cbz	r0, 800267e <_ZN11I2C_myclass8mem_readEPhhtth+0x30>
		return 0;
	return 1;
 8002678:	2001      	movs	r0, #1
 800267a:	e000      	b.n	800267e <_ZN11I2C_myclass8mem_readEPhhtth+0x30>
		return 1;
 800267c:	2001      	movs	r0, #1
}
 800267e:	b004      	add	sp, #16
 8002680:	bd70      	pop	{r4, r5, r6, pc}

08002682 <_ZN11I2C_myclass9mem_writeEPhhtth>:

uint8_t I2C_myclass::mem_write(uint8_t *pdata , uint8_t data_size , uint16_t memAddress , uint16_t memAddress_size , uint8_t target_address){
 8002682:	b570      	push	{r4, r5, r6, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
	if(target_address >= 0b10000000 )
 800268a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800268e:	d10f      	bne.n	80026b0 <_ZN11I2C_myclass9mem_writeEPhhtth+0x2e>
 8002690:	461d      	mov	r5, r3
 8002692:	4604      	mov	r4, r0
		return 1;
	if(HAL_OK == HAL_I2C_Mem_Write(i2c , target_address << 1, memAddress , memAddress_size , pdata , data_size , timeout))
 8002694:	6880      	ldr	r0, [r0, #8]
 8002696:	6863      	ldr	r3, [r4, #4]
 8002698:	9302      	str	r3, [sp, #8]
 800269a:	9201      	str	r2, [sp, #4]
 800269c:	9100      	str	r1, [sp, #0]
 800269e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80026a2:	462a      	mov	r2, r5
 80026a4:	0071      	lsls	r1, r6, #1
 80026a6:	f7fe fd69 	bl	800117c <HAL_I2C_Mem_Write>
 80026aa:	b110      	cbz	r0, 80026b2 <_ZN11I2C_myclass9mem_writeEPhhtth+0x30>
		return 0;
	return 1;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e000      	b.n	80026b2 <_ZN11I2C_myclass9mem_writeEPhhtth+0x30>
		return 1;
 80026b0:	2001      	movs	r0, #1
}
 80026b2:	b004      	add	sp, #16
 80026b4:	bd70      	pop	{r4, r5, r6, pc}

080026b6 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80026b6:	e7fe      	b.n	80026b6 <_Error_Handler>

080026b8 <SystemClock_Config>:
{
 80026b8:	b500      	push	{lr}
 80026ba:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026bc:	2302      	movs	r3, #2
 80026be:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026c0:	2201      	movs	r2, #1
 80026c2:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80026c4:	2210      	movs	r2, #16
 80026c6:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c8:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026ca:	2300      	movs	r3, #0
 80026cc:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80026ce:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80026d2:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d4:	a814      	add	r0, sp, #80	; 0x50
 80026d6:	f7fe ff7d 	bl	80015d4 <HAL_RCC_OscConfig>
 80026da:	bb50      	cbnz	r0, 8002732 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026dc:	230f      	movs	r3, #15
 80026de:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026e0:	2102      	movs	r1, #2
 80026e2:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ec:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ee:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026f0:	a80f      	add	r0, sp, #60	; 0x3c
 80026f2:	f7ff fab3 	bl	8001c5c <HAL_RCC_ClockConfig>
 80026f6:	bb00      	cbnz	r0, 800273a <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
 80026f8:	2360      	movs	r3, #96	; 0x60
 80026fa:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80026fc:	2300      	movs	r3, #0
 80026fe:	9307      	str	r3, [sp, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8002700:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002702:	4668      	mov	r0, sp
 8002704:	f7ff fb80 	bl	8001e08 <HAL_RCCEx_PeriphCLKConfig>
 8002708:	b9d8      	cbnz	r0, 8002742 <SystemClock_Config+0x8a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800270a:	f7ff fb77 	bl	8001dfc <HAL_RCC_GetHCLKFreq>
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <SystemClock_Config+0x94>)
 8002710:	fba3 3000 	umull	r3, r0, r3, r0
 8002714:	0980      	lsrs	r0, r0, #6
 8002716:	f7fe f9d3 	bl	8000ac0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800271a:	2004      	movs	r0, #4
 800271c:	f7fe f9e6 	bl	8000aec <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	4611      	mov	r1, r2
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f7fe f98a 	bl	8000a40 <HAL_NVIC_SetPriority>
}
 800272c:	b01f      	add	sp, #124	; 0x7c
 800272e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002732:	218c      	movs	r1, #140	; 0x8c
 8002734:	4806      	ldr	r0, [pc, #24]	; (8002750 <SystemClock_Config+0x98>)
 8002736:	f7ff ffbe 	bl	80026b6 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800273a:	219a      	movs	r1, #154	; 0x9a
 800273c:	4804      	ldr	r0, [pc, #16]	; (8002750 <SystemClock_Config+0x98>)
 800273e:	f7ff ffba 	bl	80026b6 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002742:	21a2      	movs	r1, #162	; 0xa2
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <SystemClock_Config+0x98>)
 8002746:	f7ff ffb6 	bl	80026b6 <_Error_Handler>
 800274a:	bf00      	nop
 800274c:	10624dd3 	.word	0x10624dd3
 8002750:	08002bc4 	.word	0x08002bc4

08002754 <main>:
{
 8002754:	b508      	push	{r3, lr}
  HAL_Init();
 8002756:	f7fe f929 	bl	80009ac <HAL_Init>
  SystemClock_Config();
 800275a:	f7ff ffad 	bl	80026b8 <SystemClock_Config>
  MX_GPIO_Init();
 800275e:	f7ff fe0b 	bl	8002378 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002762:	f7ff fe73 	bl	800244c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002766:	f7ff fea5 	bl	80024b4 <MX_I2C2_Init>
  MX_TIM6_Init();
 800276a:	f000 f8a1 	bl	80028b0 <MX_TIM6_Init>
init();
 800276e:	f000 f8ff 	bl	8002970 <init>
loop();
 8002772:	f000 f937 	bl	80029e4 <loop>
 8002776:	e7fc      	b.n	8002772 <main+0x1e>

08002778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002778:	b500      	push	{lr}
 800277a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <HAL_MspInit+0x8c>)
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	619a      	str	r2, [r3, #24]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	f002 0201 	and.w	r2, r2, #1
 800278c:	9200      	str	r2, [sp, #0]
 800278e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002796:	61da      	str	r2, [r3, #28]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a2:	2003      	movs	r0, #3
 80027a4:	f7fe f93a 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	4611      	mov	r1, r2
 80027ac:	f06f 000b 	mvn.w	r0, #11
 80027b0:	f7fe f946 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80027b4:	2200      	movs	r2, #0
 80027b6:	4611      	mov	r1, r2
 80027b8:	f06f 000a 	mvn.w	r0, #10
 80027bc:	f7fe f940 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	4611      	mov	r1, r2
 80027c4:	f06f 0009 	mvn.w	r0, #9
 80027c8:	f7fe f93a 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80027cc:	2200      	movs	r2, #0
 80027ce:	4611      	mov	r1, r2
 80027d0:	f06f 0004 	mvn.w	r0, #4
 80027d4:	f7fe f934 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80027d8:	2200      	movs	r2, #0
 80027da:	4611      	mov	r1, r2
 80027dc:	f06f 0003 	mvn.w	r0, #3
 80027e0:	f7fe f92e 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	4611      	mov	r1, r2
 80027e8:	f06f 0001 	mvn.w	r0, #1
 80027ec:	f7fe f928 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80027f0:	2200      	movs	r2, #0
 80027f2:	4611      	mov	r1, r2
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f7fe f922 	bl	8000a40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fc:	b003      	add	sp, #12
 80027fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000

08002808 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002808:	4770      	bx	lr

0800280a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800280a:	e7fe      	b.n	800280a <HardFault_Handler>

0800280c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800280c:	e7fe      	b.n	800280c <MemManage_Handler>

0800280e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800280e:	e7fe      	b.n	800280e <BusFault_Handler>

08002810 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002810:	e7fe      	b.n	8002810 <UsageFault_Handler>

08002812 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002812:	4770      	bx	lr

08002814 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002814:	4770      	bx	lr

08002816 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002816:	4770      	bx	lr

08002818 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281a:	f7fe f8d9 	bl	80009d0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800281e:	f7fe f976 	bl	8000b0e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002822:	bd08      	pop	{r3, pc}

08002824 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8002824:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	tim_internal();
 8002826:	f000 f917 	bl	8002a58 <tim_internal>
	HAL_GPIO_WritePin(GPIOC , GPIO_PIN_15 , GPIO_PIN_SET);
 800282a:	2201      	movs	r2, #1
 800282c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002830:	4803      	ldr	r0, [pc, #12]	; (8002840 <TIM6_DAC_IRQHandler+0x1c>)
 8002832:	f7fe fabf 	bl	8000db4 <HAL_GPIO_WritePin>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002836:	4803      	ldr	r0, [pc, #12]	; (8002844 <TIM6_DAC_IRQHandler+0x20>)
 8002838:	f7ff fc2b 	bl	8002092 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800283c:	bd08      	pop	{r3, pc}
 800283e:	bf00      	nop
 8002840:	48000800 	.word	0x48000800
 8002844:	20000104 	.word	0x20000104

08002848 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002848:	4915      	ldr	r1, [pc, #84]	; (80028a0 <SystemInit+0x58>)
 800284a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800284e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <SystemInit+0x5c>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002860:	6858      	ldr	r0, [r3, #4]
 8002862:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <SystemInit+0x60>)
 8002864:	4002      	ands	r2, r0
 8002866:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800286e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002872:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800287a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002882:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002886:	f022 020f 	bic.w	r2, r2, #15
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800288c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <SystemInit+0x64>)
 8002890:	4002      	ands	r2, r0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002898:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800289c:	608b      	str	r3, [r1, #8]
#endif
}
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00
 80028a4:	40021000 	.word	0x40021000
 80028a8:	f87fc00c 	.word	0xf87fc00c
 80028ac:	ff00fccc 	.word	0xff00fccc

080028b0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80028b0:	b500      	push	{lr}
 80028b2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 80028b4:	4811      	ldr	r0, [pc, #68]	; (80028fc <MX_TIM6_Init+0x4c>)
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <MX_TIM6_Init+0x50>)
 80028b8:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 15;
 80028ba:	230f      	movs	r3, #15
 80028bc:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028be:	2300      	movs	r3, #0
 80028c0:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 3999;
 80028c2:	f640 729f 	movw	r2, #3999	; 0xf9f
 80028c6:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028ca:	f7ff fd0b 	bl	80022e4 <HAL_TIM_Base_Init>
 80028ce:	b950      	cbnz	r0, 80028e6 <MX_TIM6_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028d6:	a901      	add	r1, sp, #4
 80028d8:	4808      	ldr	r0, [pc, #32]	; (80028fc <MX_TIM6_Init+0x4c>)
 80028da:	f7ff fd1d 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 80028de:	b938      	cbnz	r0, 80028f0 <MX_TIM6_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80028e0:	b005      	add	sp, #20
 80028e2:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80028e6:	213d      	movs	r1, #61	; 0x3d
 80028e8:	4806      	ldr	r0, [pc, #24]	; (8002904 <MX_TIM6_Init+0x54>)
 80028ea:	f7ff fee4 	bl	80026b6 <_Error_Handler>
 80028ee:	e7ef      	b.n	80028d0 <MX_TIM6_Init+0x20>
    _Error_Handler(__FILE__, __LINE__);
 80028f0:	2144      	movs	r1, #68	; 0x44
 80028f2:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_TIM6_Init+0x54>)
 80028f4:	f7ff fedf 	bl	80026b6 <_Error_Handler>
}
 80028f8:	e7f2      	b.n	80028e0 <MX_TIM6_Init+0x30>
 80028fa:	bf00      	nop
 80028fc:	20000104 	.word	0x20000104
 8002900:	40001000 	.word	0x40001000
 8002904:	08002bd4 	.word	0x08002bd4

08002908 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8002908:	6802      	ldr	r2, [r0, #0]
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_TIM_Base_MspInit+0x3c>)
 800290c:	429a      	cmp	r2, r3
 800290e:	d000      	beq.n	8002912 <HAL_TIM_Base_MspInit+0xa>
 8002910:	4770      	bx	lr
{
 8002912:	b500      	push	{lr}
 8002914:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002916:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	f042 0210 	orr.w	r2, r2, #16
 8002920:	61da      	str	r2, [r3, #28]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	9b01      	ldr	r3, [sp, #4]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800292c:	2200      	movs	r2, #0
 800292e:	4611      	mov	r1, r2
 8002930:	2036      	movs	r0, #54	; 0x36
 8002932:	f7fe f885 	bl	8000a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002936:	2036      	movs	r0, #54	; 0x36
 8002938:	f7fe f8b6 	bl	8000aa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800293c:	b003      	add	sp, #12
 800293e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002942:	bf00      	nop
 8002944:	40001000 	.word	0x40001000

08002948 <_Z41__static_initialization_and_destruction_0ii>:

void tim_internal(){
	for(uint8_t n=0 ; n<3 ; n++)
		angular[n] += ((int16_t)data[n*2]<<8) * 0.001;
	HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13 , GPIO_PIN_SET);
}
 8002948:	2801      	cmp	r0, #1
 800294a:	d000      	beq.n	800294e <_Z41__static_initialization_and_destruction_0ii+0x6>
 800294c:	4770      	bx	lr
 800294e:	b508      	push	{r3, lr}
 8002950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002954:	4299      	cmp	r1, r3
 8002956:	d000      	beq.n	800295a <_Z41__static_initialization_and_destruction_0ii+0x12>
 8002958:	bd08      	pop	{r3, pc}
I2C_myclass I2C_C(&hi2c2 , MAIN_I2C_ADDRESS);
 800295a:	2201      	movs	r2, #1
 800295c:	4902      	ldr	r1, [pc, #8]	; (8002968 <_Z41__static_initialization_and_destruction_0ii+0x20>)
 800295e:	4803      	ldr	r0, [pc, #12]	; (800296c <_Z41__static_initialization_and_destruction_0ii+0x24>)
 8002960:	f7ff fe5c 	bl	800261c <_ZN11I2C_myclassC1EP19__I2C_HandleTypeDefh>
}
 8002964:	e7f8      	b.n	8002958 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8002966:	bf00      	nop
 8002968:	200000b8 	.word	0x200000b8
 800296c:	20000030 	.word	0x20000030

08002970 <init>:
void init(){
 8002970:	b500      	push	{lr}
 8002972:	b085      	sub	sp, #20
	I2C_C.init();
 8002974:	4818      	ldr	r0, [pc, #96]	; (80029d8 <init+0x68>)
 8002976:	f7ff fe56 	bl	8002626 <_ZN11I2C_myclass4initEv>
	uint8_t a=0;
 800297a:	2300      	movs	r3, #0
 800297c:	f88d 300f 	strb.w	r3, [sp, #15]
	while(I2C_C.mem_read(&target_address , 1 , 0x75 , 1 , GYRO_ADD));
 8002980:	4815      	ldr	r0, [pc, #84]	; (80029d8 <init+0x68>)
 8002982:	2368      	movs	r3, #104	; 0x68
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	9200      	str	r2, [sp, #0]
 800298a:	2375      	movs	r3, #117	; 0x75
 800298c:	f100 010c 	add.w	r1, r0, #12
 8002990:	f7ff fe5d 	bl	800264e <_ZN11I2C_myclass8mem_readEPhhtth>
 8002994:	2800      	cmp	r0, #0
 8002996:	d1f3      	bne.n	8002980 <init+0x10>
	HAL_GPIO_WritePin(GPIOD , GPIO_PIN_2 , GPIO_PIN_SET);
 8002998:	2201      	movs	r2, #1
 800299a:	2104      	movs	r1, #4
 800299c:	480f      	ldr	r0, [pc, #60]	; (80029dc <init+0x6c>)
 800299e:	f7fe fa09 	bl	8000db4 <HAL_GPIO_WritePin>
	while(I2C_C.mem_write(&a , 1 , 0x6b , 1 , GYRO_ADD));
 80029a2:	2368      	movs	r3, #104	; 0x68
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	9200      	str	r2, [sp, #0]
 80029aa:	236b      	movs	r3, #107	; 0x6b
 80029ac:	f10d 010f 	add.w	r1, sp, #15
 80029b0:	4809      	ldr	r0, [pc, #36]	; (80029d8 <init+0x68>)
 80029b2:	f7ff fe66 	bl	8002682 <_ZN11I2C_myclass9mem_writeEPhhtth>
 80029b6:	2800      	cmp	r0, #0
 80029b8:	d1f3      	bne.n	80029a2 <init+0x32>
	HAL_Delay(1000);
 80029ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029be:	f7fe f819 	bl	80009f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD , GPIO_PIN_2 , GPIO_PIN_RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2104      	movs	r1, #4
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <init+0x6c>)
 80029c8:	f7fe f9f4 	bl	8000db4 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim6);
 80029cc:	4804      	ldr	r0, [pc, #16]	; (80029e0 <init+0x70>)
 80029ce:	f7ff fb4f 	bl	8002070 <HAL_TIM_Base_Start_IT>
}
 80029d2:	b005      	add	sp, #20
 80029d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80029d8:	20000030 	.word	0x20000030
 80029dc:	48000c00 	.word	0x48000c00
 80029e0:	20000104 	.word	0x20000104

080029e4 <loop>:
void loop(){
 80029e4:	b500      	push	{lr}
 80029e6:	b083      	sub	sp, #12
	if(I2C_C.mem_read((uint8_t *)data , sizeof(data) , memAdd , 1 , GYRO_ADD)){
 80029e8:	4818      	ldr	r0, [pc, #96]	; (8002a4c <loop+0x68>)
 80029ea:	2368      	movs	r3, #104	; 0x68
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	2301      	movs	r3, #1
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2343      	movs	r3, #67	; 0x43
 80029f4:	2206      	movs	r2, #6
 80029f6:	f100 0110 	add.w	r1, r0, #16
 80029fa:	f7ff fe28 	bl	800264e <_ZN11I2C_myclass8mem_readEPhhtth>
 80029fe:	b9f0      	cbnz	r0, 8002a3e <loop+0x5a>
		HAL_GPIO_WritePin(GPIOC , GPIO_PIN_14 , GPIO_PIN_SET);
 8002a00:	2201      	movs	r2, #1
 8002a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a06:	4812      	ldr	r0, [pc, #72]	; (8002a50 <loop+0x6c>)
 8002a08:	f7fe f9d4 	bl	8000db4 <HAL_GPIO_WritePin>
	angular_velocity[0] = ((int16_t)data[0]<<8 & data[1]);
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <loop+0x68>)
 8002a0e:	f993 1010 	ldrsb.w	r1, [r3, #16]
 8002a12:	f993 2011 	ldrsb.w	r2, [r3, #17]
 8002a16:	ea02 2201 	and.w	r2, r2, r1, lsl #8
 8002a1a:	831a      	strh	r2, [r3, #24]
	angular_velocity[1] = ((int16_t)data[2]<<8 & data[3]);
 8002a1c:	f993 1012 	ldrsb.w	r1, [r3, #18]
 8002a20:	f993 2013 	ldrsb.w	r2, [r3, #19]
 8002a24:	ea02 2201 	and.w	r2, r2, r1, lsl #8
 8002a28:	835a      	strh	r2, [r3, #26]
	angular_velocity[2] = ((int16_t)data[4]<<8 & data[5]);
 8002a2a:	f993 1014 	ldrsb.w	r1, [r3, #20]
 8002a2e:	f993 2015 	ldrsb.w	r2, [r3, #21]
 8002a32:	ea02 2201 	and.w	r2, r2, r1, lsl #8
 8002a36:	839a      	strh	r2, [r3, #28]
}
 8002a38:	b003      	add	sp, #12
 8002a3a:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_GPIO_WritePin(GPIOC , GPIO_PIN_14 , GPIO_PIN_RESET);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <loop+0x6c>)
 8002a46:	f7fe f9b5 	bl	8000db4 <HAL_GPIO_WritePin>
 8002a4a:	e7df      	b.n	8002a0c <loop+0x28>
 8002a4c:	20000030 	.word	0x20000030
 8002a50:	48000800 	.word	0x48000800
 8002a54:	00000000 	.word	0x00000000

08002a58 <tim_internal>:
void tim_internal(){
 8002a58:	b538      	push	{r3, r4, r5, lr}
	for(uint8_t n=0 ; n<3 ; n++)
 8002a5a:	2400      	movs	r4, #0
 8002a5c:	2c02      	cmp	r4, #2
 8002a5e:	d819      	bhi.n	8002a94 <tim_internal+0x3c>
		angular[n] += ((int16_t)data[n*2]<<8) * 0.001;
 8002a60:	4d13      	ldr	r5, [pc, #76]	; (8002ab0 <tim_internal+0x58>)
 8002a62:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8002a66:	f993 0010 	ldrsb.w	r0, [r3, #16]
 8002a6a:	0200      	lsls	r0, r0, #8
 8002a6c:	f7fd fcfe 	bl	800046c <__aeabi_i2d>
 8002a70:	a30d      	add	r3, pc, #52	; (adr r3, 8002aa8 <tim_internal+0x50>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f7fd fd63 	bl	8000540 <__aeabi_dmul>
 8002a7a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8002a86:	f7fd fba5 	bl	80001d4 <__adddf3>
 8002a8a:	e9c5 0108 	strd	r0, r1, [r5, #32]
	for(uint8_t n=0 ; n<3 ; n++)
 8002a8e:	3401      	adds	r4, #1
 8002a90:	b2e4      	uxtb	r4, r4
 8002a92:	e7e3      	b.n	8002a5c <tim_internal+0x4>
	HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13 , GPIO_PIN_SET);
 8002a94:	2201      	movs	r2, #1
 8002a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a9a:	4806      	ldr	r0, [pc, #24]	; (8002ab4 <tim_internal+0x5c>)
 8002a9c:	f7fe f98a 	bl	8000db4 <HAL_GPIO_WritePin>
}
 8002aa0:	bd38      	pop	{r3, r4, r5, pc}
 8002aa2:	bf00      	nop
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002aac:	3f50624d 	.word	0x3f50624d
 8002ab0:	20000030 	.word	0x20000030
 8002ab4:	48000800 	.word	0x48000800

08002ab8 <_GLOBAL__sub_I_I2C_C>:
 8002ab8:	b508      	push	{r3, lr}
 8002aba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f7ff ff42 	bl	8002948 <_Z41__static_initialization_and_destruction_0ii>
 8002ac4:	bd08      	pop	{r3, pc}
	...

08002ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002acc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ace:	e003      	b.n	8002ad8 <LoopCopyDataInit>

08002ad0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002ad2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ad4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ad6:	3104      	adds	r1, #4

08002ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ad8:	480b      	ldr	r0, [pc, #44]	; (8002b08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002adc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ade:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ae0:	d3f6      	bcc.n	8002ad0 <CopyDataInit>
	ldr	r2, =_sbss
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ae4:	e002      	b.n	8002aec <LoopFillZerobss>

08002ae6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ae6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ae8:	f842 3b04 	str.w	r3, [r2], #4

08002aec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <LoopForever+0x16>)
	cmp	r2, r3
 8002aee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002af0:	d3f9      	bcc.n	8002ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002af2:	f7ff fea9 	bl	8002848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af6:	f000 f811 	bl	8002b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002afa:	f7ff fe2b 	bl	8002754 <main>

08002afe <LoopForever>:

LoopForever:
    b LoopForever
 8002afe:	e7fe      	b.n	8002afe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b00:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002b04:	08002bf0 	.word	0x08002bf0
	ldr	r0, =_sdata
 8002b08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b0c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002b10:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002b14:	20000144 	.word	0x20000144

08002b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b18:	e7fe      	b.n	8002b18 <ADC1_2_IRQHandler>
	...

08002b1c <__libc_init_array>:
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	4e0d      	ldr	r6, [pc, #52]	; (8002b54 <__libc_init_array+0x38>)
 8002b20:	4c0d      	ldr	r4, [pc, #52]	; (8002b58 <__libc_init_array+0x3c>)
 8002b22:	1ba4      	subs	r4, r4, r6
 8002b24:	10a4      	asrs	r4, r4, #2
 8002b26:	2500      	movs	r5, #0
 8002b28:	42a5      	cmp	r5, r4
 8002b2a:	d109      	bne.n	8002b40 <__libc_init_array+0x24>
 8002b2c:	4e0b      	ldr	r6, [pc, #44]	; (8002b5c <__libc_init_array+0x40>)
 8002b2e:	4c0c      	ldr	r4, [pc, #48]	; (8002b60 <__libc_init_array+0x44>)
 8002b30:	f000 f818 	bl	8002b64 <_init>
 8002b34:	1ba4      	subs	r4, r4, r6
 8002b36:	10a4      	asrs	r4, r4, #2
 8002b38:	2500      	movs	r5, #0
 8002b3a:	42a5      	cmp	r5, r4
 8002b3c:	d105      	bne.n	8002b4a <__libc_init_array+0x2e>
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b44:	4798      	blx	r3
 8002b46:	3501      	adds	r5, #1
 8002b48:	e7ee      	b.n	8002b28 <__libc_init_array+0xc>
 8002b4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b4e:	4798      	blx	r3
 8002b50:	3501      	adds	r5, #1
 8002b52:	e7f2      	b.n	8002b3a <__libc_init_array+0x1e>
 8002b54:	08002be4 	.word	0x08002be4
 8002b58:	08002be4 	.word	0x08002be4
 8002b5c:	08002be4 	.word	0x08002be4
 8002b60:	08002bec 	.word	0x08002bec

08002b64 <_init>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	bf00      	nop
 8002b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6a:	bc08      	pop	{r3}
 8002b6c:	469e      	mov	lr, r3
 8002b6e:	4770      	bx	lr

08002b70 <_fini>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	bf00      	nop
 8002b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b76:	bc08      	pop	{r3}
 8002b78:	469e      	mov	lr, r3
 8002b7a:	4770      	bx	lr
